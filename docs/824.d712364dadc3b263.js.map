{"version":3,"file":"824.d712364dadc3b263.js","mappings":"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","names":["_c0","_c1","MatSliderVisualThumb_div_0_Template","rf","ctx","i0","ctx_r0","valueIndicatorText","_c2","MatSlider_div_6_ng_container_2_div_1_Template","tickMark_r6","$implicit","i_r7","index","ctx_r5","_calcTickMarkTransform","MatSlider_div_6_ng_container_2_Template","ctx_r4","_tickMarks","MatSlider_div_6_Template","ctx_r1","_cachedWidth","MatSlider_mat_slider_visual_thumb_7_Template","ctx_r2","discrete","startValueIndicatorText","_c3","MAT_SLIDER","InjectionToken","MAT_SLIDER_THUMB","MAT_SLIDER_RANGE_THUMB","MAT_SLIDER_VISUAL_THUMB","MatSliderVisualThumb","constructor","_cdr","_ngZone","_elementRef","_slider","this","_isHovered","_isActive","_isValueIndicatorVisible","_onPointerMove","event","_sliderInput","_isFocused","rect","_hostElement","getBoundingClientRect","isHovered","_isSliderThumbHovered","_showHoverRipple","_hideRipple","_hoverRippleRef","_onMouseLeave","_onFocus","_showFocusRipple","classList","add","_onBlur","_focusRippleRef","remove","_onDragStart","_showActiveRipple","_onDragEnd","_activeRippleRef","nativeElement","ngAfterViewInit","_ripple","radius","_getInput","thumbPosition","_sliderInputEl","input","runOutsideAngular","addEventListener","ngOnDestroy","removeEventListener","_isShowingRipple","_showRipple","enterDuration","exitDuration","element","rippleRef","state","animation","ignoreGlobalRippleConfig","disabled","_showValueIndicator","_isRange","_getThumb","_globalRippleOptions","launch","_noopAnimations","centered","persistent","fadeOut","_isShowingAnyRipple","_hideValueIndicator","sibling","_getSibling","_getValueIndicatorContainer","_valueIndicatorContainer","_getKnob","_knob","width","dy","clientY","y","Math","pow","clientX","x","ɵfac","t","ɵcmp","type","selectors","viewQuery","MatRipple","_t","first","hostAttrs","inputs","features","provide","useExisting","decls","vars","consts","template","dependencies","i3","i2","styles","encapsulation","changeDetection","_MatSliderMixinBase","mixinColor","mixinDisableRipple","MatSlider","_disabled","v","coerceBooleanProperty","endInput","startInput","_discrete","_updateValueIndicatorUIs","showTickMarks","_showTickMarks","min","_min","coerceNumberProperty","_updateMin","prevMin","_updateMinRange","old","new","_updateMinNonRange","_onMinMaxOrStepChange","oldEndValue","value","oldStartValue","max","_updateWidthInactive","_onTranslateXChangeBySideEffect","_onValueChange","oldValue","_updateThumbUIByValue","_updateTrackUI","_max","_updateMax","prevMax","_updateMaxRange","_updateMaxNonRange","step","_step","_updateStep","_updateStepRange","_updateStepNonRange","prevStartValue","_platform","SAFARI","elementRef","_dir","animationMode","super","displayWith","_rippleRadius","endValueIndicatorText","_isRtl","_hasViewInitialized","_tickMarkTrackWidth","_hasAnimation","_resizeTimer","_knobRadius","_thumbsOverlap","_dirChangeSubscription","change","subscribe","_onDirChange","isBrowser","_updateDimensions","eInput","sInput","detectChanges","thumb","_inputPadding","_inputOffset","_initUIRange","_initUINonRange","_updateTickMarkUI","_updateTickMarkTrackUI","_observeHostResize","initProps","initUI","_updateValueIndicatorUI","_updateMinMax","_updateStaticStyles","unsubscribe","_resizeObserver","disconnect","_onDirChangeRange","_onDirChangeNonRange","_setIsLeftThumb","translateX","_calcTranslateXByValue","ResizeObserver","clearTimeout","_onResize","observe","_getValue","_skipUpdate","_skipUIUpdate","offsetWidth","_cachedLeft","left","_setTrackActiveStyles","trackStyle","_trackActive","style","animationOriginChanged","right","transformOrigin","onStable","pipe","take","transform","length","_onTranslateXChange","source","_updateThumbUI","_updateOverlappingThumbUI","input1","input2","markForCheck","_areThumbsOverlapping","_updateOverlappingThumbClassNames","getSibling","sourceThumb","toggle","valuetext","_valuetext","setAttribute","visualThumb","percentage","floor","_updateTrackUIRange","_updateTrackUINonRange","activePercentage","abs","_isLeftThumb","fillPercentage","undefined","_updateTickMarkUIRange","_updateTickMarkUINonRange","reverse","numActive","round","numInactive","Array","fill","concat","endValue","startValue","numInactiveBeforeStartThumb","numInactiveAfterEndThumb","_input","_inputs","last","_thumbs","_setTransition","withAnimation","i1","i2$1","MAT_RIPPLE_GLOBAL_OPTIONS","ANIMATION_MODULE_TYPE","contentQueries","dirIndex","hostVars","hostBindings","color","disableRipple","exportAs","ngContentSelectors","MAT_SLIDER_THUMB_VALUE_ACCESSOR","NG_VALUE_ACCESSOR","forwardRef","MatSliderThumb","multi","val","toString","_hasSetInitialValue","_initialValue","_translateX","_setIsFocused","valueChange","EventEmitter","dragStart","dragEnd","_destroyed","Subject","_onChangeFn","_onTouchedFn","_onPointerDown","bind","_onPointerUp","next","complete","_initValue","_getDefaultValue","_onChange","emit","_onInput","_onNgControlValueChange","_formControl","button","_updateWidthActive","_updateThumbUIByPointerEvent","_handleValueCorrection","parent","setTimeout","_fixValue","xPos","numSteps","impreciseValue","_clamp","_calcTranslateXByPointerEvent","padding","options","writeValue","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","focus","blur","ɵdir","outputs","MatSliderModule","ɵmod","ɵinj","imports","MatCommonModule","CommonModule","MatRippleModule"],"sourceRoot":"webpack:///","sources":["./node_modules/@angular/material/fesm2022/slider.mjs"],"sourcesContent":["import * as i2$1 from '@angular/cdk/bidi';\nimport { coerceBooleanProperty, coerceNumberProperty } from '@angular/cdk/coercion';\nimport * as i1 from '@angular/cdk/platform';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, Component, ChangeDetectionStrategy, ViewEncapsulation, Inject, Input, ViewChild, Optional, ViewChildren, ContentChild, ContentChildren, forwardRef, EventEmitter, Directive, Output, NgModule } from '@angular/core';\nimport * as i2 from '@angular/material/core';\nimport { MatRipple, mixinColor, mixinDisableRipple, MAT_RIPPLE_GLOBAL_OPTIONS, MatCommonModule, MatRippleModule } from '@angular/material/core';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\nimport { take } from 'rxjs/operators';\nimport * as i3 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { Subject } from 'rxjs';\n\n/**\n * Injection token that can be used for a `MatSlider` to provide itself as a\n * parent to the `MatSliderThumb` and `MatSliderRangeThumb`.\n * Used primarily to avoid circular imports.\n * @docs-private\n */\nconst MAT_SLIDER = new InjectionToken('_MatSlider');\n/**\n * Injection token that can be used to query for a `MatSliderThumb`.\n * Used primarily to avoid circular imports.\n * @docs-private\n */\nconst MAT_SLIDER_THUMB = new InjectionToken('_MatSliderThumb');\n/**\n * Injection token that can be used to query for a `MatSliderRangeThumb`.\n * Used primarily to avoid circular imports.\n * @docs-private\n */\nconst MAT_SLIDER_RANGE_THUMB = new InjectionToken('_MatSliderRangeThumb');\n/**\n * Injection token that can be used to query for a `MatSliderVisualThumb`.\n * Used primarily to avoid circular imports.\n * @docs-private\n */\nconst MAT_SLIDER_VISUAL_THUMB = new InjectionToken('_MatSliderVisualThumb');\n/**\n * A simple change event emitted by the MatSlider component.\n * @deprecated Use event bindings directly on the MatSliderThumbs for `change` and `input` events. See https://material.angular.io/guide/mdc-migration for information about migrating.\n * @breaking-change 17.0.0\n */\nclass MatSliderChange {\n}\n\n/**\n * The visual slider thumb.\n *\n * Handles the slider thumb ripple states (hover, focus, and active),\n * and displaying the value tooltip on discrete sliders.\n * @docs-private\n */\nclass MatSliderVisualThumb {\n    constructor(_cdr, _ngZone, _elementRef, _slider) {\n        this._cdr = _cdr;\n        this._ngZone = _ngZone;\n        this._slider = _slider;\n        /** Whether the slider thumb is currently being hovered. */\n        this._isHovered = false;\n        /** Whether the slider thumb is currently being pressed. */\n        this._isActive = false;\n        /** Whether the value indicator tooltip is visible. */\n        this._isValueIndicatorVisible = false;\n        this._onPointerMove = (event) => {\n            if (this._sliderInput._isFocused) {\n                return;\n            }\n            const rect = this._hostElement.getBoundingClientRect();\n            const isHovered = this._isSliderThumbHovered(event, rect);\n            this._isHovered = isHovered;\n            if (isHovered) {\n                this._showHoverRipple();\n            }\n            else {\n                this._hideRipple(this._hoverRippleRef);\n            }\n        };\n        this._onMouseLeave = () => {\n            this._isHovered = false;\n            this._hideRipple(this._hoverRippleRef);\n        };\n        this._onFocus = () => {\n            // We don't want to show the hover ripple on top of the focus ripple.\n            // Happen when the users cursor is over a thumb and then the user tabs to it.\n            this._hideRipple(this._hoverRippleRef);\n            this._showFocusRipple();\n            this._hostElement.classList.add('mdc-slider__thumb--focused');\n        };\n        this._onBlur = () => {\n            // Happens when the user tabs away while still dragging a thumb.\n            if (!this._isActive) {\n                this._hideRipple(this._focusRippleRef);\n            }\n            // Happens when the user tabs away from a thumb but their cursor is still over it.\n            if (this._isHovered) {\n                this._showHoverRipple();\n            }\n            this._hostElement.classList.remove('mdc-slider__thumb--focused');\n        };\n        this._onDragStart = () => {\n            this._isActive = true;\n            this._showActiveRipple();\n        };\n        this._onDragEnd = () => {\n            this._isActive = false;\n            this._hideRipple(this._activeRippleRef);\n            // Happens when the user starts dragging a thumb, tabs away, and then stops dragging.\n            if (!this._sliderInput._isFocused) {\n                this._hideRipple(this._focusRippleRef);\n            }\n        };\n        this._hostElement = _elementRef.nativeElement;\n    }\n    ngAfterViewInit() {\n        this._ripple.radius = 24;\n        this._sliderInput = this._slider._getInput(this.thumbPosition);\n        this._sliderInputEl = this._sliderInput._hostElement;\n        const input = this._sliderInputEl;\n        // These listeners don't update any data bindings so we bind them outside\n        // of the NgZone to prevent Angular from needlessly running change detection.\n        this._ngZone.runOutsideAngular(() => {\n            input.addEventListener('pointermove', this._onPointerMove);\n            input.addEventListener('pointerdown', this._onDragStart);\n            input.addEventListener('pointerup', this._onDragEnd);\n            input.addEventListener('pointerleave', this._onMouseLeave);\n            input.addEventListener('focus', this._onFocus);\n            input.addEventListener('blur', this._onBlur);\n        });\n    }\n    ngOnDestroy() {\n        const input = this._sliderInputEl;\n        input.removeEventListener('pointermove', this._onPointerMove);\n        input.removeEventListener('pointerdown', this._onDragStart);\n        input.removeEventListener('pointerup', this._onDragEnd);\n        input.removeEventListener('pointerleave', this._onMouseLeave);\n        input.removeEventListener('focus', this._onFocus);\n        input.removeEventListener('blur', this._onBlur);\n    }\n    /** Handles displaying the hover ripple. */\n    _showHoverRipple() {\n        if (!this._isShowingRipple(this._hoverRippleRef)) {\n            this._hoverRippleRef = this._showRipple({ enterDuration: 0, exitDuration: 0 });\n            this._hoverRippleRef?.element.classList.add('mat-mdc-slider-hover-ripple');\n        }\n    }\n    /** Handles displaying the focus ripple. */\n    _showFocusRipple() {\n        // Show the focus ripple event if noop animations are enabled.\n        if (!this._isShowingRipple(this._focusRippleRef)) {\n            this._focusRippleRef = this._showRipple({ enterDuration: 0, exitDuration: 0 }, true);\n            this._focusRippleRef?.element.classList.add('mat-mdc-slider-focus-ripple');\n        }\n    }\n    /** Handles displaying the active ripple. */\n    _showActiveRipple() {\n        if (!this._isShowingRipple(this._activeRippleRef)) {\n            this._activeRippleRef = this._showRipple({ enterDuration: 225, exitDuration: 400 });\n            this._activeRippleRef?.element.classList.add('mat-mdc-slider-active-ripple');\n        }\n    }\n    /** Whether the given rippleRef is currently fading in or visible. */\n    _isShowingRipple(rippleRef) {\n        return rippleRef?.state === 0 /* RippleState.FADING_IN */ || rippleRef?.state === 1 /* RippleState.VISIBLE */;\n    }\n    /** Manually launches the slider thumb ripple using the specified ripple animation config. */\n    _showRipple(animation, ignoreGlobalRippleConfig) {\n        if (this._slider.disabled) {\n            return;\n        }\n        this._showValueIndicator();\n        if (this._slider._isRange) {\n            const sibling = this._slider._getThumb(this.thumbPosition === 1 /* _MatThumb.START */ ? 2 /* _MatThumb.END */ : 1 /* _MatThumb.START */);\n            sibling._showValueIndicator();\n        }\n        if (this._slider._globalRippleOptions?.disabled && !ignoreGlobalRippleConfig) {\n            return;\n        }\n        return this._ripple.launch({\n            animation: this._slider._noopAnimations ? { enterDuration: 0, exitDuration: 0 } : animation,\n            centered: true,\n            persistent: true,\n        });\n    }\n    /**\n     * Fades out the given ripple.\n     * Also hides the value indicator if no ripple is showing.\n     */\n    _hideRipple(rippleRef) {\n        rippleRef?.fadeOut();\n        if (this._isShowingAnyRipple()) {\n            return;\n        }\n        if (!this._slider._isRange) {\n            this._hideValueIndicator();\n        }\n        const sibling = this._getSibling();\n        if (!sibling._isShowingAnyRipple()) {\n            this._hideValueIndicator();\n            sibling._hideValueIndicator();\n        }\n    }\n    /** Shows the value indicator ui. */\n    _showValueIndicator() {\n        this._hostElement.classList.add('mdc-slider__thumb--with-indicator');\n    }\n    /** Hides the value indicator ui. */\n    _hideValueIndicator() {\n        this._hostElement.classList.remove('mdc-slider__thumb--with-indicator');\n    }\n    _getSibling() {\n        return this._slider._getThumb(this.thumbPosition === 1 /* _MatThumb.START */ ? 2 /* _MatThumb.END */ : 1 /* _MatThumb.START */);\n    }\n    /** Gets the value indicator container's native HTML element. */\n    _getValueIndicatorContainer() {\n        return this._valueIndicatorContainer?.nativeElement;\n    }\n    /** Gets the native HTML element of the slider thumb knob. */\n    _getKnob() {\n        return this._knob.nativeElement;\n    }\n    _isShowingAnyRipple() {\n        return (this._isShowingRipple(this._hoverRippleRef) ||\n            this._isShowingRipple(this._focusRippleRef) ||\n            this._isShowingRipple(this._activeRippleRef));\n    }\n    _isSliderThumbHovered(event, rect) {\n        const radius = rect.width / 2;\n        const centerX = rect.x + radius;\n        const centerY = rect.y + radius;\n        const dx = event.clientX - centerX;\n        const dy = event.clientY - centerY;\n        return Math.pow(dx, 2) + Math.pow(dy, 2) < Math.pow(radius, 2);\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: MatSliderVisualThumb, deps: [{ token: i0.ChangeDetectorRef }, { token: i0.NgZone }, { token: i0.ElementRef }, { token: MAT_SLIDER }], target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"16.0.0\", type: MatSliderVisualThumb, selector: \"mat-slider-visual-thumb\", inputs: { discrete: \"discrete\", thumbPosition: \"thumbPosition\", valueIndicatorText: \"valueIndicatorText\" }, host: { classAttribute: \"mdc-slider__thumb mat-mdc-slider-visual-thumb\" }, providers: [{ provide: MAT_SLIDER_VISUAL_THUMB, useExisting: MatSliderVisualThumb }], viewQueries: [{ propertyName: \"_ripple\", first: true, predicate: MatRipple, descendants: true }, { propertyName: \"_knob\", first: true, predicate: [\"knob\"], descendants: true }, { propertyName: \"_valueIndicatorContainer\", first: true, predicate: [\"valueIndicatorContainer\"], descendants: true }], ngImport: i0, template: \"<div class=\\\"mdc-slider__value-indicator-container\\\" *ngIf=\\\"discrete\\\" #valueIndicatorContainer>\\n  <div class=\\\"mdc-slider__value-indicator\\\">\\n    <span class=\\\"mdc-slider__value-indicator-text\\\">{{valueIndicatorText}}</span>\\n  </div>\\n</div>\\n<div class=\\\"mdc-slider__thumb-knob\\\" #knob></div>\\n<div matRipple class=\\\"mat-mdc-focus-indicator\\\" [matRippleDisabled]=\\\"true\\\"></div>\\n\", styles: [\".mat-mdc-slider-visual-thumb .mat-ripple{height:100%;width:100%}.mat-mdc-slider .mdc-slider__tick-marks{justify-content:start}.mat-mdc-slider .mdc-slider__tick-marks .mdc-slider__tick-mark--active,.mat-mdc-slider .mdc-slider__tick-marks .mdc-slider__tick-mark--inactive{position:absolute;left:2px}\"], dependencies: [{ kind: \"directive\", type: i3.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { kind: \"directive\", type: i2.MatRipple, selector: \"[mat-ripple], [matRipple]\", inputs: [\"matRippleColor\", \"matRippleUnbounded\", \"matRippleCentered\", \"matRippleRadius\", \"matRippleAnimation\", \"matRippleDisabled\", \"matRippleTrigger\"], exportAs: [\"matRipple\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: MatSliderVisualThumb, decorators: [{\n            type: Component,\n            args: [{ selector: 'mat-slider-visual-thumb', host: {\n                        'class': 'mdc-slider__thumb mat-mdc-slider-visual-thumb',\n                    }, changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, providers: [{ provide: MAT_SLIDER_VISUAL_THUMB, useExisting: MatSliderVisualThumb }], template: \"<div class=\\\"mdc-slider__value-indicator-container\\\" *ngIf=\\\"discrete\\\" #valueIndicatorContainer>\\n  <div class=\\\"mdc-slider__value-indicator\\\">\\n    <span class=\\\"mdc-slider__value-indicator-text\\\">{{valueIndicatorText}}</span>\\n  </div>\\n</div>\\n<div class=\\\"mdc-slider__thumb-knob\\\" #knob></div>\\n<div matRipple class=\\\"mat-mdc-focus-indicator\\\" [matRippleDisabled]=\\\"true\\\"></div>\\n\", styles: [\".mat-mdc-slider-visual-thumb .mat-ripple{height:100%;width:100%}.mat-mdc-slider .mdc-slider__tick-marks{justify-content:start}.mat-mdc-slider .mdc-slider__tick-marks .mdc-slider__tick-mark--active,.mat-mdc-slider .mdc-slider__tick-marks .mdc-slider__tick-mark--inactive{position:absolute;left:2px}\"] }]\n        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }, { type: i0.NgZone }, { type: i0.ElementRef }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [MAT_SLIDER]\n                }] }]; }, propDecorators: { discrete: [{\n                type: Input\n            }], thumbPosition: [{\n                type: Input\n            }], valueIndicatorText: [{\n                type: Input\n            }], _ripple: [{\n                type: ViewChild,\n                args: [MatRipple]\n            }], _knob: [{\n                type: ViewChild,\n                args: ['knob']\n            }], _valueIndicatorContainer: [{\n                type: ViewChild,\n                args: ['valueIndicatorContainer']\n            }] } });\n\n// TODO(wagnermaciel): maybe handle the following edge case:\n// 1. start dragging discrete slider\n// 2. tab to disable checkbox\n// 3. without ending drag, disable the slider\n// Boilerplate for applying mixins to MatSlider.\nconst _MatSliderMixinBase = mixinColor(mixinDisableRipple(class {\n    constructor(_elementRef) {\n        this._elementRef = _elementRef;\n    }\n}), 'primary');\n/**\n * Allows users to select from a range of values by moving the slider thumb. It is similar in\n * behavior to the native `<input type=\"range\">` element.\n */\nclass MatSlider extends _MatSliderMixinBase {\n    /** Whether the slider is disabled. */\n    get disabled() {\n        return this._disabled;\n    }\n    set disabled(v) {\n        this._disabled = coerceBooleanProperty(v);\n        const endInput = this._getInput(2 /* _MatThumb.END */);\n        const startInput = this._getInput(1 /* _MatThumb.START */);\n        if (endInput) {\n            endInput.disabled = this._disabled;\n        }\n        if (startInput) {\n            startInput.disabled = this._disabled;\n        }\n    }\n    /** Whether the slider displays a numeric value label upon pressing the thumb. */\n    get discrete() {\n        return this._discrete;\n    }\n    set discrete(v) {\n        this._discrete = coerceBooleanProperty(v);\n        this._updateValueIndicatorUIs();\n    }\n    /** Whether the slider displays tick marks along the slider track. */\n    get showTickMarks() {\n        return this._showTickMarks;\n    }\n    set showTickMarks(v) {\n        this._showTickMarks = coerceBooleanProperty(v);\n    }\n    /** The minimum value that the slider can have. */\n    get min() {\n        return this._min;\n    }\n    set min(v) {\n        const min = coerceNumberProperty(v, this._min);\n        if (this._min !== min) {\n            this._updateMin(min);\n        }\n    }\n    _updateMin(min) {\n        const prevMin = this._min;\n        this._min = min;\n        this._isRange ? this._updateMinRange({ old: prevMin, new: min }) : this._updateMinNonRange(min);\n        this._onMinMaxOrStepChange();\n    }\n    _updateMinRange(min) {\n        const endInput = this._getInput(2 /* _MatThumb.END */);\n        const startInput = this._getInput(1 /* _MatThumb.START */);\n        const oldEndValue = endInput.value;\n        const oldStartValue = startInput.value;\n        startInput.min = min.new;\n        endInput.min = Math.max(min.new, startInput.value);\n        startInput.max = Math.min(endInput.max, endInput.value);\n        startInput._updateWidthInactive();\n        endInput._updateWidthInactive();\n        min.new < min.old\n            ? this._onTranslateXChangeBySideEffect(endInput, startInput)\n            : this._onTranslateXChangeBySideEffect(startInput, endInput);\n        if (oldEndValue !== endInput.value) {\n            this._onValueChange(endInput);\n        }\n        if (oldStartValue !== startInput.value) {\n            this._onValueChange(startInput);\n        }\n    }\n    _updateMinNonRange(min) {\n        const input = this._getInput(2 /* _MatThumb.END */);\n        if (input) {\n            const oldValue = input.value;\n            input.min = min;\n            input._updateThumbUIByValue();\n            this._updateTrackUI(input);\n            if (oldValue !== input.value) {\n                this._onValueChange(input);\n            }\n        }\n    }\n    /** The maximum value that the slider can have. */\n    get max() {\n        return this._max;\n    }\n    set max(v) {\n        const max = coerceNumberProperty(v, this._max);\n        if (this._max !== max) {\n            this._updateMax(max);\n        }\n    }\n    _updateMax(max) {\n        const prevMax = this._max;\n        this._max = max;\n        this._isRange ? this._updateMaxRange({ old: prevMax, new: max }) : this._updateMaxNonRange(max);\n        this._onMinMaxOrStepChange();\n    }\n    _updateMaxRange(max) {\n        const endInput = this._getInput(2 /* _MatThumb.END */);\n        const startInput = this._getInput(1 /* _MatThumb.START */);\n        const oldEndValue = endInput.value;\n        const oldStartValue = startInput.value;\n        endInput.max = max.new;\n        startInput.max = Math.min(max.new, endInput.value);\n        endInput.min = startInput.value;\n        endInput._updateWidthInactive();\n        startInput._updateWidthInactive();\n        max.new > max.old\n            ? this._onTranslateXChangeBySideEffect(startInput, endInput)\n            : this._onTranslateXChangeBySideEffect(endInput, startInput);\n        if (oldEndValue !== endInput.value) {\n            this._onValueChange(endInput);\n        }\n        if (oldStartValue !== startInput.value) {\n            this._onValueChange(startInput);\n        }\n    }\n    _updateMaxNonRange(max) {\n        const input = this._getInput(2 /* _MatThumb.END */);\n        if (input) {\n            const oldValue = input.value;\n            input.max = max;\n            input._updateThumbUIByValue();\n            this._updateTrackUI(input);\n            if (oldValue !== input.value) {\n                this._onValueChange(input);\n            }\n        }\n    }\n    /** The values at which the thumb will snap. */\n    get step() {\n        return this._step;\n    }\n    set step(v) {\n        const step = coerceNumberProperty(v, this._step);\n        if (this._step !== step) {\n            this._updateStep(step);\n        }\n    }\n    _updateStep(step) {\n        this._step = step;\n        this._isRange ? this._updateStepRange() : this._updateStepNonRange();\n        this._onMinMaxOrStepChange();\n    }\n    _updateStepRange() {\n        const endInput = this._getInput(2 /* _MatThumb.END */);\n        const startInput = this._getInput(1 /* _MatThumb.START */);\n        const oldEndValue = endInput.value;\n        const oldStartValue = startInput.value;\n        const prevStartValue = startInput.value;\n        endInput.min = this._min;\n        startInput.max = this._max;\n        endInput.step = this._step;\n        startInput.step = this._step;\n        if (this._platform.SAFARI) {\n            endInput.value = endInput.value;\n            startInput.value = startInput.value;\n        }\n        endInput.min = Math.max(this._min, startInput.value);\n        startInput.max = Math.min(this._max, endInput.value);\n        startInput._updateWidthInactive();\n        endInput._updateWidthInactive();\n        endInput.value < prevStartValue\n            ? this._onTranslateXChangeBySideEffect(startInput, endInput)\n            : this._onTranslateXChangeBySideEffect(endInput, startInput);\n        if (oldEndValue !== endInput.value) {\n            this._onValueChange(endInput);\n        }\n        if (oldStartValue !== startInput.value) {\n            this._onValueChange(startInput);\n        }\n    }\n    _updateStepNonRange() {\n        const input = this._getInput(2 /* _MatThumb.END */);\n        if (input) {\n            const oldValue = input.value;\n            input.step = this._step;\n            if (this._platform.SAFARI) {\n                input.value = input.value;\n            }\n            input._updateThumbUIByValue();\n            if (oldValue !== input.value) {\n                this._onValueChange(input);\n            }\n        }\n    }\n    constructor(_ngZone, _cdr, _platform, elementRef, _dir, _globalRippleOptions, animationMode) {\n        super(elementRef);\n        this._ngZone = _ngZone;\n        this._cdr = _cdr;\n        this._platform = _platform;\n        this._dir = _dir;\n        this._globalRippleOptions = _globalRippleOptions;\n        this._disabled = false;\n        this._discrete = false;\n        this._showTickMarks = false;\n        this._min = 0;\n        this._max = 100;\n        this._step = 0;\n        /**\n         * Function that will be used to format the value before it is displayed\n         * in the thumb label. Can be used to format very large number in order\n         * for them to fit into the slider thumb.\n         */\n        this.displayWith = (value) => `${value}`;\n        this._rippleRadius = 24;\n        // The value indicator tooltip text for the visual slider thumb(s).\n        /** @docs-private */\n        this.startValueIndicatorText = '';\n        /** @docs-private */\n        this.endValueIndicatorText = '';\n        this._isRange = false;\n        /** Whether the slider is rtl. */\n        this._isRtl = false;\n        this._hasViewInitialized = false;\n        /**\n         * The width of the tick mark track.\n         * The tick mark track width is different from full track width\n         */\n        this._tickMarkTrackWidth = 0;\n        this._hasAnimation = false;\n        this._resizeTimer = null;\n        /** The radius of the native slider's knob. AFAIK there is no way to avoid hardcoding this. */\n        this._knobRadius = 8;\n        /** Whether or not the slider thumbs overlap. */\n        this._thumbsOverlap = false;\n        this._noopAnimations = animationMode === 'NoopAnimations';\n        this._dirChangeSubscription = this._dir.change.subscribe(() => this._onDirChange());\n        this._isRtl = this._dir.value === 'rtl';\n    }\n    ngAfterViewInit() {\n        if (this._platform.isBrowser) {\n            this._updateDimensions();\n        }\n        const eInput = this._getInput(2 /* _MatThumb.END */);\n        const sInput = this._getInput(1 /* _MatThumb.START */);\n        this._isRange = !!eInput && !!sInput;\n        this._cdr.detectChanges();\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            _validateInputs(this._isRange, this._getInput(2 /* _MatThumb.END */), this._getInput(1 /* _MatThumb.START */));\n        }\n        const thumb = this._getThumb(2 /* _MatThumb.END */);\n        this._rippleRadius = thumb._ripple.radius;\n        this._inputPadding = this._rippleRadius - this._knobRadius;\n        this._inputOffset = this._knobRadius;\n        this._isRange\n            ? this._initUIRange(eInput, sInput)\n            : this._initUINonRange(eInput);\n        this._updateTrackUI(eInput);\n        this._updateTickMarkUI();\n        this._updateTickMarkTrackUI();\n        this._observeHostResize();\n        this._cdr.detectChanges();\n    }\n    _initUINonRange(eInput) {\n        eInput.initProps();\n        eInput.initUI();\n        this._updateValueIndicatorUI(eInput);\n        this._hasViewInitialized = true;\n        eInput._updateThumbUIByValue();\n    }\n    _initUIRange(eInput, sInput) {\n        eInput.initProps();\n        eInput.initUI();\n        sInput.initProps();\n        sInput.initUI();\n        eInput._updateMinMax();\n        sInput._updateMinMax();\n        eInput._updateStaticStyles();\n        sInput._updateStaticStyles();\n        this._updateValueIndicatorUIs();\n        this._hasViewInitialized = true;\n        eInput._updateThumbUIByValue();\n        sInput._updateThumbUIByValue();\n    }\n    ngOnDestroy() {\n        this._dirChangeSubscription.unsubscribe();\n        this._resizeObserver?.disconnect();\n        this._resizeObserver = null;\n    }\n    /** Handles updating the slider ui after a dir change. */\n    _onDirChange() {\n        this._isRtl = this._dir.value === 'rtl';\n        this._isRange ? this._onDirChangeRange() : this._onDirChangeNonRange();\n        this._updateTickMarkUI();\n    }\n    _onDirChangeRange() {\n        const endInput = this._getInput(2 /* _MatThumb.END */);\n        const startInput = this._getInput(1 /* _MatThumb.START */);\n        endInput._setIsLeftThumb();\n        startInput._setIsLeftThumb();\n        endInput.translateX = endInput._calcTranslateXByValue();\n        startInput.translateX = startInput._calcTranslateXByValue();\n        endInput._updateStaticStyles();\n        startInput._updateStaticStyles();\n        endInput._updateWidthInactive();\n        startInput._updateWidthInactive();\n        endInput._updateThumbUIByValue();\n        startInput._updateThumbUIByValue();\n    }\n    _onDirChangeNonRange() {\n        const input = this._getInput(2 /* _MatThumb.END */);\n        input._updateThumbUIByValue();\n    }\n    /** Starts observing and updating the slider if the host changes its size. */\n    _observeHostResize() {\n        if (typeof ResizeObserver === 'undefined' || !ResizeObserver) {\n            return;\n        }\n        this._ngZone.runOutsideAngular(() => {\n            this._resizeObserver = new ResizeObserver(() => {\n                if (this._isActive()) {\n                    return;\n                }\n                if (this._resizeTimer) {\n                    clearTimeout(this._resizeTimer);\n                }\n                this._onResize();\n            });\n            this._resizeObserver.observe(this._elementRef.nativeElement);\n        });\n    }\n    /** Whether any of the thumbs are currently active. */\n    _isActive() {\n        return this._getThumb(1 /* _MatThumb.START */)._isActive || this._getThumb(2 /* _MatThumb.END */)._isActive;\n    }\n    _getValue(thumbPosition = 2 /* _MatThumb.END */) {\n        const input = this._getInput(thumbPosition);\n        if (!input) {\n            return this.min;\n        }\n        return input.value;\n    }\n    _skipUpdate() {\n        return !!(this._getInput(1 /* _MatThumb.START */)?._skipUIUpdate || this._getInput(2 /* _MatThumb.END */)?._skipUIUpdate);\n    }\n    /** Stores the slider dimensions. */\n    _updateDimensions() {\n        this._cachedWidth = this._elementRef.nativeElement.offsetWidth;\n        this._cachedLeft = this._elementRef.nativeElement.getBoundingClientRect().left;\n    }\n    /** Sets the styles for the active portion of the track. */\n    _setTrackActiveStyles(styles) {\n        const trackStyle = this._trackActive.nativeElement.style;\n        const animationOriginChanged = styles.left !== trackStyle.left && styles.right !== trackStyle.right;\n        trackStyle.left = styles.left;\n        trackStyle.right = styles.right;\n        trackStyle.transformOrigin = styles.transformOrigin;\n        if (animationOriginChanged) {\n            this._elementRef.nativeElement.classList.add('mat-mdc-slider-disable-track-animation');\n            this._ngZone.onStable.pipe(take(1)).subscribe(() => {\n                this._elementRef.nativeElement.classList.remove('mat-mdc-slider-disable-track-animation');\n                trackStyle.transform = styles.transform;\n            });\n        }\n        else {\n            trackStyle.transform = styles.transform;\n        }\n    }\n    /** Returns the translateX positioning for a tick mark based on it's index. */\n    _calcTickMarkTransform(index) {\n        // TODO(wagnermaciel): See if we can avoid doing this and just using flex to position these.\n        const translateX = index * (this._tickMarkTrackWidth / (this._tickMarks.length - 1));\n        return `translateX(${translateX}px`;\n    }\n    // Handlers for updating the slider ui.\n    _onTranslateXChange(source) {\n        if (!this._hasViewInitialized) {\n            return;\n        }\n        this._updateThumbUI(source);\n        this._updateTrackUI(source);\n        this._updateOverlappingThumbUI(source);\n    }\n    _onTranslateXChangeBySideEffect(input1, input2) {\n        if (!this._hasViewInitialized) {\n            return;\n        }\n        input1._updateThumbUIByValue();\n        input2._updateThumbUIByValue();\n    }\n    _onValueChange(source) {\n        if (!this._hasViewInitialized) {\n            return;\n        }\n        this._updateValueIndicatorUI(source);\n        this._updateTickMarkUI();\n        this._cdr.detectChanges();\n    }\n    _onMinMaxOrStepChange() {\n        if (!this._hasViewInitialized) {\n            return;\n        }\n        this._updateTickMarkUI();\n        this._updateTickMarkTrackUI();\n        this._cdr.markForCheck();\n    }\n    _onResize() {\n        if (!this._hasViewInitialized) {\n            return;\n        }\n        this._updateDimensions();\n        if (this._isRange) {\n            const eInput = this._getInput(2 /* _MatThumb.END */);\n            const sInput = this._getInput(1 /* _MatThumb.START */);\n            eInput._updateThumbUIByValue();\n            sInput._updateThumbUIByValue();\n            eInput._updateStaticStyles();\n            sInput._updateStaticStyles();\n            eInput._updateMinMax();\n            sInput._updateMinMax();\n            eInput._updateWidthInactive();\n            sInput._updateWidthInactive();\n        }\n        else {\n            const eInput = this._getInput(2 /* _MatThumb.END */);\n            if (eInput) {\n                eInput._updateThumbUIByValue();\n            }\n        }\n        this._updateTickMarkUI();\n        this._updateTickMarkTrackUI();\n        this._cdr.detectChanges();\n    }\n    /** Returns true if the slider knobs are overlapping one another. */\n    _areThumbsOverlapping() {\n        const startInput = this._getInput(1 /* _MatThumb.START */);\n        const endInput = this._getInput(2 /* _MatThumb.END */);\n        if (!startInput || !endInput) {\n            return false;\n        }\n        return endInput.translateX - startInput.translateX < 20;\n    }\n    /**\n     * Updates the class names of overlapping slider thumbs so\n     * that the current active thumb is styled to be on \"top\".\n     */\n    _updateOverlappingThumbClassNames(source) {\n        const sibling = source.getSibling();\n        const sourceThumb = this._getThumb(source.thumbPosition);\n        const siblingThumb = this._getThumb(sibling.thumbPosition);\n        siblingThumb._hostElement.classList.remove('mdc-slider__thumb--top');\n        sourceThumb._hostElement.classList.toggle('mdc-slider__thumb--top', this._thumbsOverlap);\n    }\n    /** Updates the UI of slider thumbs when they begin or stop overlapping. */\n    _updateOverlappingThumbUI(source) {\n        if (!this._isRange || this._skipUpdate()) {\n            return;\n        }\n        if (this._thumbsOverlap !== this._areThumbsOverlapping()) {\n            this._thumbsOverlap = !this._thumbsOverlap;\n            this._updateOverlappingThumbClassNames(source);\n        }\n    }\n    // _MatThumb styles update conditions\n    //\n    // 1. TranslateX, resize, or dir change\n    //    - Reason: The thumb styles need to be updated according to the new translateX.\n    // 2. Min, max, or step\n    //    - Reason: The value may have silently changed.\n    /** Updates the translateX of the given thumb. */\n    _updateThumbUI(source) {\n        if (this._skipUpdate()) {\n            return;\n        }\n        const thumb = this._getThumb(source.thumbPosition === 2 /* _MatThumb.END */ ? 2 /* _MatThumb.END */ : 1 /* _MatThumb.START */);\n        thumb._hostElement.style.transform = `translateX(${source.translateX}px)`;\n    }\n    // Value indicator text update conditions\n    //\n    // 1. Value\n    //    - Reason: The value displayed needs to be updated.\n    // 2. Min, max, or step\n    //    - Reason: The value may have silently changed.\n    /** Updates the value indicator tooltip ui for the given thumb. */\n    _updateValueIndicatorUI(source) {\n        if (this._skipUpdate()) {\n            return;\n        }\n        const valuetext = this.displayWith(source.value);\n        this._hasViewInitialized\n            ? (source._valuetext = valuetext)\n            : source._hostElement.setAttribute('aria-valuetext', valuetext);\n        if (this.discrete) {\n            source.thumbPosition === 1 /* _MatThumb.START */\n                ? (this.startValueIndicatorText = valuetext)\n                : (this.endValueIndicatorText = valuetext);\n            const visualThumb = this._getThumb(source.thumbPosition);\n            valuetext.length < 3\n                ? visualThumb._hostElement.classList.add('mdc-slider__thumb--short-value')\n                : visualThumb._hostElement.classList.remove('mdc-slider__thumb--short-value');\n        }\n    }\n    /** Updates all value indicator UIs in the slider. */\n    _updateValueIndicatorUIs() {\n        const eInput = this._getInput(2 /* _MatThumb.END */);\n        const sInput = this._getInput(1 /* _MatThumb.START */);\n        if (eInput) {\n            this._updateValueIndicatorUI(eInput);\n        }\n        if (sInput) {\n            this._updateValueIndicatorUI(sInput);\n        }\n    }\n    // Update Tick Mark Track Width\n    //\n    // 1. Min, max, or step\n    //    - Reason: The maximum reachable value may have changed.\n    //    - Side note: The maximum reachable value is different from the maximum value set by the\n    //      user. For example, a slider with [min: 5, max: 100, step: 10] would have a maximum\n    //      reachable value of 95.\n    // 2. Resize\n    //    - Reason: The position for the maximum reachable value needs to be recalculated.\n    /** Updates the width of the tick mark track. */\n    _updateTickMarkTrackUI() {\n        if (!this.showTickMarks || this._skipUpdate()) {\n            return;\n        }\n        const step = this._step && this._step > 0 ? this._step : 1;\n        const maxValue = Math.floor(this.max / step) * step;\n        const percentage = (maxValue - this.min) / (this.max - this.min);\n        this._tickMarkTrackWidth = this._cachedWidth * percentage - 6;\n    }\n    // Track active update conditions\n    //\n    // 1. TranslateX\n    //    - Reason: The track active should line up with the new thumb position.\n    // 2. Min or max\n    //    - Reason #1: The 'active' percentage needs to be recalculated.\n    //    - Reason #2: The value may have silently changed.\n    // 3. Step\n    //    - Reason: The value may have silently changed causing the thumb(s) to shift.\n    // 4. Dir change\n    //    - Reason: The track active will need to be updated according to the new thumb position(s).\n    // 5. Resize\n    //    - Reason: The total width the 'active' tracks translateX is based on has changed.\n    /** Updates the scale on the active portion of the track. */\n    _updateTrackUI(source) {\n        if (this._skipUpdate()) {\n            return;\n        }\n        this._isRange\n            ? this._updateTrackUIRange(source)\n            : this._updateTrackUINonRange(source);\n    }\n    _updateTrackUIRange(source) {\n        const sibling = source.getSibling();\n        if (!sibling || !this._cachedWidth) {\n            return;\n        }\n        const activePercentage = Math.abs(sibling.translateX - source.translateX) / this._cachedWidth;\n        if (source._isLeftThumb && this._cachedWidth) {\n            this._setTrackActiveStyles({\n                left: 'auto',\n                right: `${this._cachedWidth - sibling.translateX}px`,\n                transformOrigin: 'right',\n                transform: `scaleX(${activePercentage})`,\n            });\n        }\n        else {\n            this._setTrackActiveStyles({\n                left: `${sibling.translateX}px`,\n                right: 'auto',\n                transformOrigin: 'left',\n                transform: `scaleX(${activePercentage})`,\n            });\n        }\n    }\n    _updateTrackUINonRange(source) {\n        this._isRtl\n            ? this._setTrackActiveStyles({\n                left: 'auto',\n                right: '0px',\n                transformOrigin: 'right',\n                transform: `scaleX(${1 - source.fillPercentage})`,\n            })\n            : this._setTrackActiveStyles({\n                left: '0px',\n                right: 'auto',\n                transformOrigin: 'left',\n                transform: `scaleX(${source.fillPercentage})`,\n            });\n    }\n    // Tick mark update conditions\n    //\n    // 1. Value\n    //    - Reason: a tick mark which was once active might now be inactive or vice versa.\n    // 2. Min, max, or step\n    //    - Reason #1: the number of tick marks may have changed.\n    //    - Reason #2: The value may have silently changed.\n    /** Updates the dots along the slider track. */\n    _updateTickMarkUI() {\n        if (!this.showTickMarks ||\n            this.step === undefined ||\n            this.min === undefined ||\n            this.max === undefined) {\n            return;\n        }\n        const step = this.step > 0 ? this.step : 1;\n        this._isRange ? this._updateTickMarkUIRange(step) : this._updateTickMarkUINonRange(step);\n        if (this._isRtl) {\n            this._tickMarks.reverse();\n        }\n    }\n    _updateTickMarkUINonRange(step) {\n        const value = this._getValue();\n        let numActive = Math.max(Math.round((value - this.min) / step), 0);\n        let numInactive = Math.max(Math.round((this.max - value) / step), 0);\n        this._isRtl ? numActive++ : numInactive++;\n        this._tickMarks = Array(numActive)\n            .fill(0 /* _MatTickMark.ACTIVE */)\n            .concat(Array(numInactive).fill(1 /* _MatTickMark.INACTIVE */));\n    }\n    _updateTickMarkUIRange(step) {\n        const endValue = this._getValue();\n        const startValue = this._getValue(1 /* _MatThumb.START */);\n        const numInactiveBeforeStartThumb = Math.max(Math.floor((startValue - this.min) / step), 0);\n        const numActive = Math.max(Math.floor((endValue - startValue) / step) + 1, 0);\n        const numInactiveAfterEndThumb = Math.max(Math.floor((this.max - endValue) / step), 0);\n        this._tickMarks = Array(numInactiveBeforeStartThumb)\n            .fill(1 /* _MatTickMark.INACTIVE */)\n            .concat(Array(numActive).fill(0 /* _MatTickMark.ACTIVE */), Array(numInactiveAfterEndThumb).fill(1 /* _MatTickMark.INACTIVE */));\n    }\n    /** Gets the slider thumb input of the given thumb position. */\n    _getInput(thumbPosition) {\n        if (thumbPosition === 2 /* _MatThumb.END */ && this._input) {\n            return this._input;\n        }\n        if (this._inputs?.length) {\n            return thumbPosition === 1 /* _MatThumb.START */ ? this._inputs.first : this._inputs.last;\n        }\n        return;\n    }\n    /** Gets the slider thumb HTML input element of the given thumb position. */\n    _getThumb(thumbPosition) {\n        return thumbPosition === 2 /* _MatThumb.END */ ? this._thumbs?.last : this._thumbs?.first;\n    }\n    _setTransition(withAnimation) {\n        this._hasAnimation = withAnimation && !this._noopAnimations;\n        this._elementRef.nativeElement.classList.toggle('mat-mdc-slider-with-animation', this._hasAnimation);\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: MatSlider, deps: [{ token: i0.NgZone }, { token: i0.ChangeDetectorRef }, { token: i1.Platform }, { token: i0.ElementRef }, { token: i2$1.Directionality, optional: true }, { token: MAT_RIPPLE_GLOBAL_OPTIONS, optional: true }, { token: ANIMATION_MODULE_TYPE, optional: true }], target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"16.0.0\", type: MatSlider, selector: \"mat-slider\", inputs: { color: \"color\", disableRipple: \"disableRipple\", disabled: \"disabled\", discrete: \"discrete\", showTickMarks: \"showTickMarks\", min: \"min\", max: \"max\", step: \"step\", displayWith: \"displayWith\" }, host: { properties: { \"class.mdc-slider--range\": \"_isRange\", \"class.mdc-slider--disabled\": \"disabled\", \"class.mdc-slider--discrete\": \"discrete\", \"class.mdc-slider--tick-marks\": \"showTickMarks\", \"class._mat-animation-noopable\": \"_noopAnimations\" }, classAttribute: \"mat-mdc-slider mdc-slider\" }, providers: [{ provide: MAT_SLIDER, useExisting: MatSlider }], queries: [{ propertyName: \"_input\", first: true, predicate: MAT_SLIDER_THUMB, descendants: true }, { propertyName: \"_inputs\", predicate: MAT_SLIDER_RANGE_THUMB }], viewQueries: [{ propertyName: \"_trackActive\", first: true, predicate: [\"trackActive\"], descendants: true }, { propertyName: \"_thumbs\", predicate: MAT_SLIDER_VISUAL_THUMB, descendants: true }], exportAs: [\"matSlider\"], usesInheritance: true, ngImport: i0, template: \"<!-- Inputs -->\\n<ng-content></ng-content>\\n\\n<!-- Track -->\\n<div class=\\\"mdc-slider__track\\\">\\n  <div class=\\\"mdc-slider__track--inactive\\\"></div>\\n  <div class=\\\"mdc-slider__track--active\\\">\\n    <div #trackActive class=\\\"mdc-slider__track--active_fill\\\"></div>\\n  </div>\\n  <div *ngIf=\\\"showTickMarks\\\" class=\\\"mdc-slider__tick-marks\\\" #tickMarkContainer>\\n    <ng-container *ngIf=\\\"_cachedWidth\\\">\\n        <div\\n          *ngFor=\\\"let tickMark of _tickMarks; let i = index\\\"\\n          [class]=\\\"tickMark === 0 ? 'mdc-slider__tick-mark--active' : 'mdc-slider__tick-mark--inactive'\\\"\\n          [style.transform]=\\\"_calcTickMarkTransform(i)\\\"></div>\\n    </ng-container>\\n  </div>\\n</div>\\n\\n<!-- Thumbs -->\\n<mat-slider-visual-thumb\\n  *ngIf=\\\"_isRange\\\"\\n  [discrete]=\\\"discrete\\\"\\n  [thumbPosition]=\\\"1\\\"\\n  [valueIndicatorText]=\\\"startValueIndicatorText\\\">\\n</mat-slider-visual-thumb>\\n\\n<mat-slider-visual-thumb\\n  [discrete]=\\\"discrete\\\"\\n  [thumbPosition]=\\\"2\\\"\\n  [valueIndicatorText]=\\\"endValueIndicatorText\\\">\\n</mat-slider-visual-thumb>\\n\", styles: [\".mdc-slider{cursor:pointer;height:48px;margin:0 24px;position:relative;touch-action:pan-y}.mdc-slider .mdc-slider__track{position:absolute;top:50%;transform:translateY(-50%);width:100%}.mdc-slider .mdc-slider__track--active,.mdc-slider .mdc-slider__track--inactive{display:flex;height:100%;position:absolute;width:100%}.mdc-slider .mdc-slider__track--active{overflow:hidden}.mdc-slider .mdc-slider__track--active_fill{border-top-style:solid;box-sizing:border-box;height:100%;width:100%;position:relative;-webkit-transform-origin:left;transform-origin:left}[dir=rtl] .mdc-slider .mdc-slider__track--active_fill,.mdc-slider .mdc-slider__track--active_fill[dir=rtl]{-webkit-transform-origin:right;transform-origin:right}.mdc-slider .mdc-slider__track--inactive{left:0;top:0}.mdc-slider .mdc-slider__track--inactive::before{position:absolute;box-sizing:border-box;width:100%;height:100%;top:0;left:0;border:1px solid rgba(0,0,0,0);border-radius:inherit;content:\\\"\\\";pointer-events:none}@media screen and (forced-colors: active){.mdc-slider .mdc-slider__track--inactive::before{border-color:CanvasText}}.mdc-slider .mdc-slider__value-indicator-container{bottom:44px;left:var(--slider-value-indicator-container-left, 50%);pointer-events:none;position:absolute;right:var(--slider-value-indicator-container-right);transform:var(--slider-value-indicator-container-transform, translateX(-50%))}.mdc-slider .mdc-slider__value-indicator{transition:transform 100ms 0ms cubic-bezier(0.4, 0, 1, 1);align-items:center;border-radius:4px;display:flex;height:32px;padding:0 12px;transform:scale(0);transform-origin:bottom}.mdc-slider .mdc-slider__value-indicator::before{border-left:6px solid rgba(0,0,0,0);border-right:6px solid rgba(0,0,0,0);border-top:6px solid;bottom:-5px;content:\\\"\\\";height:0;left:var(--slider-value-indicator-caret-left, 50%);position:absolute;right:var(--slider-value-indicator-caret-right);transform:var(--slider-value-indicator-caret-transform, translateX(-50%));width:0}.mdc-slider .mdc-slider__value-indicator::after{position:absolute;box-sizing:border-box;width:100%;height:100%;top:0;left:0;border:1px solid rgba(0,0,0,0);border-radius:inherit;content:\\\"\\\";pointer-events:none}@media screen and (forced-colors: active){.mdc-slider .mdc-slider__value-indicator::after{border-color:CanvasText}}.mdc-slider .mdc-slider__thumb--with-indicator .mdc-slider__value-indicator-container{pointer-events:auto}.mdc-slider .mdc-slider__thumb--with-indicator .mdc-slider__value-indicator{transition:transform 100ms 0ms cubic-bezier(0, 0, 0.2, 1);transform:scale(1)}@media(prefers-reduced-motion){.mdc-slider .mdc-slider__value-indicator,.mdc-slider .mdc-slider__thumb--with-indicator .mdc-slider__value-indicator{transition:none}}.mdc-slider .mdc-slider__thumb{display:flex;left:-24px;outline:none;position:absolute;user-select:none;height:48px;width:48px}.mdc-slider .mdc-slider__thumb--top{z-index:1}.mdc-slider .mdc-slider__thumb--top .mdc-slider__thumb-knob,.mdc-slider .mdc-slider__thumb--top.mdc-slider__thumb:hover .mdc-slider__thumb-knob,.mdc-slider .mdc-slider__thumb--top.mdc-slider__thumb--focused .mdc-slider__thumb-knob{border-style:solid;border-width:1px;box-sizing:content-box}.mdc-slider .mdc-slider__thumb-knob{box-sizing:border-box;left:50%;position:absolute;top:50%;transform:translate(-50%, -50%)}.mdc-slider .mdc-slider__tick-marks{align-items:center;box-sizing:border-box;display:flex;height:100%;justify-content:space-between;padding:0 1px;position:absolute;width:100%}.mdc-slider--discrete .mdc-slider__thumb,.mdc-slider--discrete .mdc-slider__track--active_fill{transition:transform 80ms ease}@media(prefers-reduced-motion){.mdc-slider--discrete .mdc-slider__thumb,.mdc-slider--discrete .mdc-slider__track--active_fill{transition:none}}.mdc-slider--disabled{cursor:auto}.mdc-slider--disabled .mdc-slider__thumb{pointer-events:none}.mdc-slider__input{cursor:pointer;left:2px;margin:0;height:44px;opacity:0;pointer-events:none;position:absolute;top:2px;width:44px}.mat-mdc-slider{display:inline-block;box-sizing:border-box;outline:none;vertical-align:middle;margin-left:8px;margin-right:8px;width:auto;min-width:112px;-webkit-tap-highlight-color:rgba(0,0,0,0)}.mat-mdc-slider .mdc-slider__thumb-knob{background-color:var(--mdc-slider-handle-color, var(--mdc-theme-primary, #6200ee));border-color:var(--mdc-slider-handle-color, var(--mdc-theme-primary, #6200ee))}.mat-mdc-slider .mdc-slider__thumb--top .mdc-slider__thumb-knob,.mat-mdc-slider .mdc-slider__thumb--top.mdc-slider__thumb:hover .mdc-slider__thumb-knob,.mat-mdc-slider .mdc-slider__thumb--top.mdc-slider__thumb--focused .mdc-slider__thumb-knob{border-color:#fff}.mat-mdc-slider.mdc-slider--disabled .mdc-slider__thumb-knob{background-color:var(--mdc-slider-disabled-handle-color, var(--mdc-theme-on-surface, #000));border-color:var(--mdc-slider-disabled-handle-color, var(--mdc-theme-on-surface, #000))}.mat-mdc-slider.mdc-slider--disabled .mdc-slider__thumb--top .mdc-slider__thumb-knob,.mat-mdc-slider.mdc-slider--disabled .mdc-slider__thumb--top.mdc-slider__thumb:hover .mdc-slider__thumb-knob,.mat-mdc-slider.mdc-slider--disabled .mdc-slider__thumb--top.mdc-slider__thumb--focused .mdc-slider__thumb-knob{border-color:#fff}.mat-mdc-slider .mdc-slider__thumb::before,.mat-mdc-slider .mdc-slider__thumb::after{background-color:var(--mdc-slider-handle-color, var(--mdc-theme-primary, #6200ee))}.mat-mdc-slider .mdc-slider__thumb:hover::before,.mat-mdc-slider .mdc-slider__thumb.mdc-ripple-surface--hover::before{opacity:var(--mdc-ripple-hover-opacity, 0.04)}.mat-mdc-slider .mdc-slider__thumb.mdc-ripple-upgraded--background-focused::before,.mat-mdc-slider .mdc-slider__thumb:not(.mdc-ripple-upgraded):focus::before{transition-duration:75ms;opacity:var(--mdc-ripple-focus-opacity, 0.12)}.mat-mdc-slider .mdc-slider__thumb:not(.mdc-ripple-upgraded)::after{transition:opacity 150ms linear}.mat-mdc-slider .mdc-slider__thumb:not(.mdc-ripple-upgraded):active::after{transition-duration:75ms;opacity:var(--mdc-ripple-press-opacity, 0.12)}.mat-mdc-slider .mdc-slider__thumb.mdc-ripple-upgraded{--mdc-ripple-fg-opacity:var(--mdc-ripple-press-opacity, 0.12)}.mat-mdc-slider .mdc-slider__track--active_fill{border-color:var(--mdc-slider-active-track-color, var(--mdc-theme-primary, #6200ee))}.mat-mdc-slider.mdc-slider--disabled .mdc-slider__track--active_fill{border-color:var(--mdc-slider-disabled-active-track-color, var(--mdc-theme-on-surface, #000))}.mat-mdc-slider .mdc-slider__track--inactive{background-color:var(--mdc-slider-inactive-track-color, var(--mdc-theme-primary, #6200ee));opacity:.24}.mat-mdc-slider.mdc-slider--disabled .mdc-slider__track--inactive{background-color:var(--mdc-slider-disabled-inactive-track-color, var(--mdc-theme-on-surface, #000));opacity:.24}.mat-mdc-slider .mdc-slider__tick-mark--active{background-color:var(--mdc-slider-with-tick-marks-active-container-color, var(--mdc-theme-on-primary, #fff));opacity:var(--mdc-slider-with-tick-marks-active-container-opacity, 0.6)}.mat-mdc-slider.mdc-slider--disabled .mdc-slider__tick-mark--active{background-color:var(--mdc-slider-with-tick-marks-active-container-color, var(--mdc-theme-on-primary, #fff));opacity:var(--mdc-slider-with-tick-marks-active-container-opacity, 0.6)}.mat-mdc-slider .mdc-slider__tick-mark--inactive{background-color:var(--mdc-slider-with-tick-marks-inactive-container-color, var(--mdc-theme-primary, #6200ee));opacity:var(--mdc-slider-with-tick-marks-inactive-container-opacity, 0.6)}.mat-mdc-slider.mdc-slider--disabled .mdc-slider__tick-mark--inactive{background-color:var(--mdc-slider-with-tick-marks-disabled-container-color, var(--mdc-theme-on-surface, #000));opacity:var(--mdc-slider-with-tick-marks-inactive-container-opacity, 0.6)}.mat-mdc-slider .mdc-slider__value-indicator{background-color:var(--mdc-slider-label-container-color, #666666);opacity:1}.mat-mdc-slider .mdc-slider__value-indicator::before{border-top-color:var(--mdc-slider-label-container-color, #666666)}.mat-mdc-slider .mdc-slider__value-indicator{color:var(--mdc-slider-label-label-text-color, var(--mdc-theme-on-primary, #fff))}.mat-mdc-slider .mdc-slider__track{height:var(--mdc-slider-inactive-track-height, 4px)}.mat-mdc-slider .mdc-slider__track--active{height:var(--mdc-slider-active-track-height, 6px);top:calc((var(--mdc-slider-inactive-track-height, 4px) - var(--mdc-slider-active-track-height, 6px)) / 2)}.mat-mdc-slider .mdc-slider__track--active_fill{border-top-width:var(--mdc-slider-active-track-height, 6px)}.mat-mdc-slider .mdc-slider__track--inactive{height:var(--mdc-slider-inactive-track-height, 4px)}.mat-mdc-slider .mdc-slider__tick-mark--active,.mat-mdc-slider .mdc-slider__tick-mark--inactive{height:var(--mdc-slider-with-tick-marks-container-size, 2px);width:var(--mdc-slider-with-tick-marks-container-size, 2px)}.mat-mdc-slider.mdc-slider--disabled{opacity:0.38}.mat-mdc-slider .mdc-slider__value-indicator-text{letter-spacing:var(--mdc-slider-label-label-text-tracking, 0.0071428571em);font-size:var(--mdc-slider-label-label-text-size, 0.875rem);font-family:var(--mdc-slider-label-label-text-font, Roboto, sans-serif);font-weight:var(--mdc-slider-label-label-text-weight, 500);line-height:var(--mdc-slider-label-label-text-line-height, 1.375rem)}.mat-mdc-slider .mdc-slider__track--active{border-radius:var(--mdc-slider-active-track-shape, 9999px)}.mat-mdc-slider .mdc-slider__track--inactive{border-radius:var(--mdc-slider-inactive-track-shape, 9999px)}.mat-mdc-slider .mdc-slider__thumb-knob{border-radius:var(--mdc-slider-handle-shape, 50%);width:var(--mdc-slider-handle-width, 20px);height:var(--mdc-slider-handle-height, 20px);border-style:solid;border-width:calc(var(--mdc-slider-handle-height, 20px) / 2) calc(var(--mdc-slider-handle-width, 20px) / 2)}.mat-mdc-slider .mdc-slider__tick-mark--active,.mat-mdc-slider .mdc-slider__tick-mark--inactive{border-radius:var(--mdc-slider-with-tick-marks-container-shape, 50%)}.mat-mdc-slider .mdc-slider__thumb-knob{box-shadow:var(--mdc-slider-handle-elevation, 0px 2px 1px -1px rgba(0, 0, 0, 0.2), 0px 1px 1px 0px rgba(0, 0, 0, 0.14), 0px 1px 3px 0px rgba(0, 0, 0, 0.12))}.mat-mdc-slider .mdc-slider__thumb:hover .mdc-slider__thumb-knob{background-color:var(--mdc-slider-hover-handle-color, var(--mdc-theme-primary, #6200ee));border-color:var(--mdc-slider-hover-handle-color, var(--mdc-theme-primary, #6200ee))}.mat-mdc-slider .mdc-slider__thumb:hover .mdc-slider__thumb--top .mdc-slider__thumb-knob,.mat-mdc-slider .mdc-slider__thumb:hover .mdc-slider__thumb--top.mdc-slider__thumb:hover .mdc-slider__thumb-knob,.mat-mdc-slider .mdc-slider__thumb:hover .mdc-slider__thumb--top.mdc-slider__thumb--focused .mdc-slider__thumb-knob{border-color:#fff}.mat-mdc-slider .mdc-slider__thumb--focused .mdc-slider__thumb-knob{background-color:var(--mdc-slider-focus-handle-color, var(--mdc-theme-primary, #6200ee));border-color:var(--mdc-slider-focus-handle-color, var(--mdc-theme-primary, #6200ee))}.mat-mdc-slider .mdc-slider__thumb--focused .mdc-slider__thumb--top .mdc-slider__thumb-knob,.mat-mdc-slider .mdc-slider__thumb--focused .mdc-slider__thumb--top.mdc-slider__thumb:hover .mdc-slider__thumb-knob,.mat-mdc-slider .mdc-slider__thumb--focused .mdc-slider__thumb--top.mdc-slider__thumb--focused .mdc-slider__thumb-knob{border-color:#fff}.mat-mdc-slider .mdc-slider__thumb:not(:disabled):active .mdc-slider__thumb--top .mdc-slider__thumb-knob,.mat-mdc-slider .mdc-slider__thumb:not(:disabled):active .mdc-slider__thumb--top.mdc-slider__thumb:hover .mdc-slider__thumb-knob,.mat-mdc-slider .mdc-slider__thumb:not(:disabled):active .mdc-slider__thumb--top.mdc-slider__thumb--focused .mdc-slider__thumb-knob{border-color:#fff}.mat-mdc-slider .mdc-slider__thumb--top .mdc-slider__thumb-knob,.mat-mdc-slider .mdc-slider__thumb--top.mdc-slider__thumb:hover .mdc-slider__thumb-knob,.mat-mdc-slider .mdc-slider__thumb--top.mdc-slider__thumb--focused .mdc-slider__thumb-knob{border-color:var(--mdc-slider-with-overlap-handle-outline-color, #fff);border-width:var(--mdc-slider-with-overlap-handle-outline-width, 1px)}.mat-mdc-slider .mdc-slider__input{box-sizing:content-box;pointer-events:auto}.mat-mdc-slider .mdc-slider__input.mat-mdc-slider-input-no-pointer-events{pointer-events:none}.mat-mdc-slider .mdc-slider__input.mat-slider__right-input{left:auto;right:0}.mat-mdc-slider .mdc-slider__thumb,.mat-mdc-slider .mdc-slider__track--active_fill{transition-duration:0ms}.mat-mdc-slider.mat-mdc-slider-with-animation .mdc-slider__thumb,.mat-mdc-slider.mat-mdc-slider-with-animation .mdc-slider__track--active_fill{transition-duration:80ms}.mat-mdc-slider.mat-mdc-slider-with-animation.mat-mdc-slider-disable-track-animation .mdc-slider__track--active_fill{transition-duration:0ms}.mat-mdc-slider.mdc-slider--discrete .mdc-slider__thumb,.mat-mdc-slider.mdc-slider--discrete .mdc-slider__track--active_fill{transition-duration:0ms}.mat-mdc-slider.mat-mdc-slider-with-animation .mdc-slider__thumb,.mat-mdc-slider.mat-mdc-slider-with-animation .mdc-slider__track--active_fill{transition-duration:80ms}.mat-mdc-slider.mat-mdc-slider-with-animation.mat-mdc-slider-disable-track-animation .mdc-slider__track--active_fill{transition-duration:0ms}.mat-mdc-slider .mdc-slider__track,.mat-mdc-slider .mdc-slider__thumb{pointer-events:none}.mat-mdc-slider .mdc-slider__value-indicator{opacity:var(--mat-mdc-slider-value-indicator-opacity, 1)}.mat-mdc-slider .mat-ripple .mat-ripple-element{background-color:var(--mat-mdc-slider-ripple-color, transparent)}.mat-mdc-slider .mat-ripple .mat-mdc-slider-hover-ripple{background-color:var(--mat-mdc-slider-hover-ripple-color, transparent)}.mat-mdc-slider .mat-ripple .mat-mdc-slider-focus-ripple,.mat-mdc-slider .mat-ripple .mat-mdc-slider-active-ripple{background-color:var(--mat-mdc-slider-focus-ripple-color, transparent)}.mat-mdc-slider._mat-animation-noopable.mdc-slider--discrete .mdc-slider__thumb,.mat-mdc-slider._mat-animation-noopable.mdc-slider--discrete .mdc-slider__track--active_fill,.mat-mdc-slider._mat-animation-noopable .mdc-slider__value-indicator{transition:none}.mat-mdc-slider .mat-mdc-focus-indicator::before{border-radius:50%}.mdc-slider__thumb--focused .mat-mdc-focus-indicator::before{content:\\\"\\\"}\"], dependencies: [{ kind: \"directive\", type: i3.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }, { kind: \"directive\", type: i3.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { kind: \"component\", type: MatSliderVisualThumb, selector: \"mat-slider-visual-thumb\", inputs: [\"discrete\", \"thumbPosition\", \"valueIndicatorText\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: MatSlider, decorators: [{\n            type: Component,\n            args: [{ selector: 'mat-slider', host: {\n                        'class': 'mat-mdc-slider mdc-slider',\n                        '[class.mdc-slider--range]': '_isRange',\n                        '[class.mdc-slider--disabled]': 'disabled',\n                        '[class.mdc-slider--discrete]': 'discrete',\n                        '[class.mdc-slider--tick-marks]': 'showTickMarks',\n                        '[class._mat-animation-noopable]': '_noopAnimations',\n                    }, exportAs: 'matSlider', changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, inputs: ['color', 'disableRipple'], providers: [{ provide: MAT_SLIDER, useExisting: MatSlider }], template: \"<!-- Inputs -->\\n<ng-content></ng-content>\\n\\n<!-- Track -->\\n<div class=\\\"mdc-slider__track\\\">\\n  <div class=\\\"mdc-slider__track--inactive\\\"></div>\\n  <div class=\\\"mdc-slider__track--active\\\">\\n    <div #trackActive class=\\\"mdc-slider__track--active_fill\\\"></div>\\n  </div>\\n  <div *ngIf=\\\"showTickMarks\\\" class=\\\"mdc-slider__tick-marks\\\" #tickMarkContainer>\\n    <ng-container *ngIf=\\\"_cachedWidth\\\">\\n        <div\\n          *ngFor=\\\"let tickMark of _tickMarks; let i = index\\\"\\n          [class]=\\\"tickMark === 0 ? 'mdc-slider__tick-mark--active' : 'mdc-slider__tick-mark--inactive'\\\"\\n          [style.transform]=\\\"_calcTickMarkTransform(i)\\\"></div>\\n    </ng-container>\\n  </div>\\n</div>\\n\\n<!-- Thumbs -->\\n<mat-slider-visual-thumb\\n  *ngIf=\\\"_isRange\\\"\\n  [discrete]=\\\"discrete\\\"\\n  [thumbPosition]=\\\"1\\\"\\n  [valueIndicatorText]=\\\"startValueIndicatorText\\\">\\n</mat-slider-visual-thumb>\\n\\n<mat-slider-visual-thumb\\n  [discrete]=\\\"discrete\\\"\\n  [thumbPosition]=\\\"2\\\"\\n  [valueIndicatorText]=\\\"endValueIndicatorText\\\">\\n</mat-slider-visual-thumb>\\n\", styles: [\".mdc-slider{cursor:pointer;height:48px;margin:0 24px;position:relative;touch-action:pan-y}.mdc-slider .mdc-slider__track{position:absolute;top:50%;transform:translateY(-50%);width:100%}.mdc-slider .mdc-slider__track--active,.mdc-slider .mdc-slider__track--inactive{display:flex;height:100%;position:absolute;width:100%}.mdc-slider .mdc-slider__track--active{overflow:hidden}.mdc-slider .mdc-slider__track--active_fill{border-top-style:solid;box-sizing:border-box;height:100%;width:100%;position:relative;-webkit-transform-origin:left;transform-origin:left}[dir=rtl] .mdc-slider .mdc-slider__track--active_fill,.mdc-slider .mdc-slider__track--active_fill[dir=rtl]{-webkit-transform-origin:right;transform-origin:right}.mdc-slider .mdc-slider__track--inactive{left:0;top:0}.mdc-slider .mdc-slider__track--inactive::before{position:absolute;box-sizing:border-box;width:100%;height:100%;top:0;left:0;border:1px solid rgba(0,0,0,0);border-radius:inherit;content:\\\"\\\";pointer-events:none}@media screen and (forced-colors: active){.mdc-slider .mdc-slider__track--inactive::before{border-color:CanvasText}}.mdc-slider .mdc-slider__value-indicator-container{bottom:44px;left:var(--slider-value-indicator-container-left, 50%);pointer-events:none;position:absolute;right:var(--slider-value-indicator-container-right);transform:var(--slider-value-indicator-container-transform, translateX(-50%))}.mdc-slider .mdc-slider__value-indicator{transition:transform 100ms 0ms cubic-bezier(0.4, 0, 1, 1);align-items:center;border-radius:4px;display:flex;height:32px;padding:0 12px;transform:scale(0);transform-origin:bottom}.mdc-slider .mdc-slider__value-indicator::before{border-left:6px solid rgba(0,0,0,0);border-right:6px solid rgba(0,0,0,0);border-top:6px solid;bottom:-5px;content:\\\"\\\";height:0;left:var(--slider-value-indicator-caret-left, 50%);position:absolute;right:var(--slider-value-indicator-caret-right);transform:var(--slider-value-indicator-caret-transform, translateX(-50%));width:0}.mdc-slider .mdc-slider__value-indicator::after{position:absolute;box-sizing:border-box;width:100%;height:100%;top:0;left:0;border:1px solid rgba(0,0,0,0);border-radius:inherit;content:\\\"\\\";pointer-events:none}@media screen and (forced-colors: active){.mdc-slider .mdc-slider__value-indicator::after{border-color:CanvasText}}.mdc-slider .mdc-slider__thumb--with-indicator .mdc-slider__value-indicator-container{pointer-events:auto}.mdc-slider .mdc-slider__thumb--with-indicator .mdc-slider__value-indicator{transition:transform 100ms 0ms cubic-bezier(0, 0, 0.2, 1);transform:scale(1)}@media(prefers-reduced-motion){.mdc-slider .mdc-slider__value-indicator,.mdc-slider .mdc-slider__thumb--with-indicator .mdc-slider__value-indicator{transition:none}}.mdc-slider .mdc-slider__thumb{display:flex;left:-24px;outline:none;position:absolute;user-select:none;height:48px;width:48px}.mdc-slider .mdc-slider__thumb--top{z-index:1}.mdc-slider .mdc-slider__thumb--top .mdc-slider__thumb-knob,.mdc-slider .mdc-slider__thumb--top.mdc-slider__thumb:hover .mdc-slider__thumb-knob,.mdc-slider .mdc-slider__thumb--top.mdc-slider__thumb--focused .mdc-slider__thumb-knob{border-style:solid;border-width:1px;box-sizing:content-box}.mdc-slider .mdc-slider__thumb-knob{box-sizing:border-box;left:50%;position:absolute;top:50%;transform:translate(-50%, -50%)}.mdc-slider .mdc-slider__tick-marks{align-items:center;box-sizing:border-box;display:flex;height:100%;justify-content:space-between;padding:0 1px;position:absolute;width:100%}.mdc-slider--discrete .mdc-slider__thumb,.mdc-slider--discrete .mdc-slider__track--active_fill{transition:transform 80ms ease}@media(prefers-reduced-motion){.mdc-slider--discrete .mdc-slider__thumb,.mdc-slider--discrete .mdc-slider__track--active_fill{transition:none}}.mdc-slider--disabled{cursor:auto}.mdc-slider--disabled .mdc-slider__thumb{pointer-events:none}.mdc-slider__input{cursor:pointer;left:2px;margin:0;height:44px;opacity:0;pointer-events:none;position:absolute;top:2px;width:44px}.mat-mdc-slider{display:inline-block;box-sizing:border-box;outline:none;vertical-align:middle;margin-left:8px;margin-right:8px;width:auto;min-width:112px;-webkit-tap-highlight-color:rgba(0,0,0,0)}.mat-mdc-slider .mdc-slider__thumb-knob{background-color:var(--mdc-slider-handle-color, var(--mdc-theme-primary, #6200ee));border-color:var(--mdc-slider-handle-color, var(--mdc-theme-primary, #6200ee))}.mat-mdc-slider .mdc-slider__thumb--top .mdc-slider__thumb-knob,.mat-mdc-slider .mdc-slider__thumb--top.mdc-slider__thumb:hover .mdc-slider__thumb-knob,.mat-mdc-slider .mdc-slider__thumb--top.mdc-slider__thumb--focused .mdc-slider__thumb-knob{border-color:#fff}.mat-mdc-slider.mdc-slider--disabled .mdc-slider__thumb-knob{background-color:var(--mdc-slider-disabled-handle-color, var(--mdc-theme-on-surface, #000));border-color:var(--mdc-slider-disabled-handle-color, var(--mdc-theme-on-surface, #000))}.mat-mdc-slider.mdc-slider--disabled .mdc-slider__thumb--top .mdc-slider__thumb-knob,.mat-mdc-slider.mdc-slider--disabled .mdc-slider__thumb--top.mdc-slider__thumb:hover .mdc-slider__thumb-knob,.mat-mdc-slider.mdc-slider--disabled .mdc-slider__thumb--top.mdc-slider__thumb--focused .mdc-slider__thumb-knob{border-color:#fff}.mat-mdc-slider .mdc-slider__thumb::before,.mat-mdc-slider .mdc-slider__thumb::after{background-color:var(--mdc-slider-handle-color, var(--mdc-theme-primary, #6200ee))}.mat-mdc-slider .mdc-slider__thumb:hover::before,.mat-mdc-slider .mdc-slider__thumb.mdc-ripple-surface--hover::before{opacity:var(--mdc-ripple-hover-opacity, 0.04)}.mat-mdc-slider .mdc-slider__thumb.mdc-ripple-upgraded--background-focused::before,.mat-mdc-slider .mdc-slider__thumb:not(.mdc-ripple-upgraded):focus::before{transition-duration:75ms;opacity:var(--mdc-ripple-focus-opacity, 0.12)}.mat-mdc-slider .mdc-slider__thumb:not(.mdc-ripple-upgraded)::after{transition:opacity 150ms linear}.mat-mdc-slider .mdc-slider__thumb:not(.mdc-ripple-upgraded):active::after{transition-duration:75ms;opacity:var(--mdc-ripple-press-opacity, 0.12)}.mat-mdc-slider .mdc-slider__thumb.mdc-ripple-upgraded{--mdc-ripple-fg-opacity:var(--mdc-ripple-press-opacity, 0.12)}.mat-mdc-slider .mdc-slider__track--active_fill{border-color:var(--mdc-slider-active-track-color, var(--mdc-theme-primary, #6200ee))}.mat-mdc-slider.mdc-slider--disabled .mdc-slider__track--active_fill{border-color:var(--mdc-slider-disabled-active-track-color, var(--mdc-theme-on-surface, #000))}.mat-mdc-slider .mdc-slider__track--inactive{background-color:var(--mdc-slider-inactive-track-color, var(--mdc-theme-primary, #6200ee));opacity:.24}.mat-mdc-slider.mdc-slider--disabled .mdc-slider__track--inactive{background-color:var(--mdc-slider-disabled-inactive-track-color, var(--mdc-theme-on-surface, #000));opacity:.24}.mat-mdc-slider .mdc-slider__tick-mark--active{background-color:var(--mdc-slider-with-tick-marks-active-container-color, var(--mdc-theme-on-primary, #fff));opacity:var(--mdc-slider-with-tick-marks-active-container-opacity, 0.6)}.mat-mdc-slider.mdc-slider--disabled .mdc-slider__tick-mark--active{background-color:var(--mdc-slider-with-tick-marks-active-container-color, var(--mdc-theme-on-primary, #fff));opacity:var(--mdc-slider-with-tick-marks-active-container-opacity, 0.6)}.mat-mdc-slider .mdc-slider__tick-mark--inactive{background-color:var(--mdc-slider-with-tick-marks-inactive-container-color, var(--mdc-theme-primary, #6200ee));opacity:var(--mdc-slider-with-tick-marks-inactive-container-opacity, 0.6)}.mat-mdc-slider.mdc-slider--disabled .mdc-slider__tick-mark--inactive{background-color:var(--mdc-slider-with-tick-marks-disabled-container-color, var(--mdc-theme-on-surface, #000));opacity:var(--mdc-slider-with-tick-marks-inactive-container-opacity, 0.6)}.mat-mdc-slider .mdc-slider__value-indicator{background-color:var(--mdc-slider-label-container-color, #666666);opacity:1}.mat-mdc-slider .mdc-slider__value-indicator::before{border-top-color:var(--mdc-slider-label-container-color, #666666)}.mat-mdc-slider .mdc-slider__value-indicator{color:var(--mdc-slider-label-label-text-color, var(--mdc-theme-on-primary, #fff))}.mat-mdc-slider .mdc-slider__track{height:var(--mdc-slider-inactive-track-height, 4px)}.mat-mdc-slider .mdc-slider__track--active{height:var(--mdc-slider-active-track-height, 6px);top:calc((var(--mdc-slider-inactive-track-height, 4px) - var(--mdc-slider-active-track-height, 6px)) / 2)}.mat-mdc-slider .mdc-slider__track--active_fill{border-top-width:var(--mdc-slider-active-track-height, 6px)}.mat-mdc-slider .mdc-slider__track--inactive{height:var(--mdc-slider-inactive-track-height, 4px)}.mat-mdc-slider .mdc-slider__tick-mark--active,.mat-mdc-slider .mdc-slider__tick-mark--inactive{height:var(--mdc-slider-with-tick-marks-container-size, 2px);width:var(--mdc-slider-with-tick-marks-container-size, 2px)}.mat-mdc-slider.mdc-slider--disabled{opacity:0.38}.mat-mdc-slider .mdc-slider__value-indicator-text{letter-spacing:var(--mdc-slider-label-label-text-tracking, 0.0071428571em);font-size:var(--mdc-slider-label-label-text-size, 0.875rem);font-family:var(--mdc-slider-label-label-text-font, Roboto, sans-serif);font-weight:var(--mdc-slider-label-label-text-weight, 500);line-height:var(--mdc-slider-label-label-text-line-height, 1.375rem)}.mat-mdc-slider .mdc-slider__track--active{border-radius:var(--mdc-slider-active-track-shape, 9999px)}.mat-mdc-slider .mdc-slider__track--inactive{border-radius:var(--mdc-slider-inactive-track-shape, 9999px)}.mat-mdc-slider .mdc-slider__thumb-knob{border-radius:var(--mdc-slider-handle-shape, 50%);width:var(--mdc-slider-handle-width, 20px);height:var(--mdc-slider-handle-height, 20px);border-style:solid;border-width:calc(var(--mdc-slider-handle-height, 20px) / 2) calc(var(--mdc-slider-handle-width, 20px) / 2)}.mat-mdc-slider .mdc-slider__tick-mark--active,.mat-mdc-slider .mdc-slider__tick-mark--inactive{border-radius:var(--mdc-slider-with-tick-marks-container-shape, 50%)}.mat-mdc-slider .mdc-slider__thumb-knob{box-shadow:var(--mdc-slider-handle-elevation, 0px 2px 1px -1px rgba(0, 0, 0, 0.2), 0px 1px 1px 0px rgba(0, 0, 0, 0.14), 0px 1px 3px 0px rgba(0, 0, 0, 0.12))}.mat-mdc-slider .mdc-slider__thumb:hover .mdc-slider__thumb-knob{background-color:var(--mdc-slider-hover-handle-color, var(--mdc-theme-primary, #6200ee));border-color:var(--mdc-slider-hover-handle-color, var(--mdc-theme-primary, #6200ee))}.mat-mdc-slider .mdc-slider__thumb:hover .mdc-slider__thumb--top .mdc-slider__thumb-knob,.mat-mdc-slider .mdc-slider__thumb:hover .mdc-slider__thumb--top.mdc-slider__thumb:hover .mdc-slider__thumb-knob,.mat-mdc-slider .mdc-slider__thumb:hover .mdc-slider__thumb--top.mdc-slider__thumb--focused .mdc-slider__thumb-knob{border-color:#fff}.mat-mdc-slider .mdc-slider__thumb--focused .mdc-slider__thumb-knob{background-color:var(--mdc-slider-focus-handle-color, var(--mdc-theme-primary, #6200ee));border-color:var(--mdc-slider-focus-handle-color, var(--mdc-theme-primary, #6200ee))}.mat-mdc-slider .mdc-slider__thumb--focused .mdc-slider__thumb--top .mdc-slider__thumb-knob,.mat-mdc-slider .mdc-slider__thumb--focused .mdc-slider__thumb--top.mdc-slider__thumb:hover .mdc-slider__thumb-knob,.mat-mdc-slider .mdc-slider__thumb--focused .mdc-slider__thumb--top.mdc-slider__thumb--focused .mdc-slider__thumb-knob{border-color:#fff}.mat-mdc-slider .mdc-slider__thumb:not(:disabled):active .mdc-slider__thumb--top .mdc-slider__thumb-knob,.mat-mdc-slider .mdc-slider__thumb:not(:disabled):active .mdc-slider__thumb--top.mdc-slider__thumb:hover .mdc-slider__thumb-knob,.mat-mdc-slider .mdc-slider__thumb:not(:disabled):active .mdc-slider__thumb--top.mdc-slider__thumb--focused .mdc-slider__thumb-knob{border-color:#fff}.mat-mdc-slider .mdc-slider__thumb--top .mdc-slider__thumb-knob,.mat-mdc-slider .mdc-slider__thumb--top.mdc-slider__thumb:hover .mdc-slider__thumb-knob,.mat-mdc-slider .mdc-slider__thumb--top.mdc-slider__thumb--focused .mdc-slider__thumb-knob{border-color:var(--mdc-slider-with-overlap-handle-outline-color, #fff);border-width:var(--mdc-slider-with-overlap-handle-outline-width, 1px)}.mat-mdc-slider .mdc-slider__input{box-sizing:content-box;pointer-events:auto}.mat-mdc-slider .mdc-slider__input.mat-mdc-slider-input-no-pointer-events{pointer-events:none}.mat-mdc-slider .mdc-slider__input.mat-slider__right-input{left:auto;right:0}.mat-mdc-slider .mdc-slider__thumb,.mat-mdc-slider .mdc-slider__track--active_fill{transition-duration:0ms}.mat-mdc-slider.mat-mdc-slider-with-animation .mdc-slider__thumb,.mat-mdc-slider.mat-mdc-slider-with-animation .mdc-slider__track--active_fill{transition-duration:80ms}.mat-mdc-slider.mat-mdc-slider-with-animation.mat-mdc-slider-disable-track-animation .mdc-slider__track--active_fill{transition-duration:0ms}.mat-mdc-slider.mdc-slider--discrete .mdc-slider__thumb,.mat-mdc-slider.mdc-slider--discrete .mdc-slider__track--active_fill{transition-duration:0ms}.mat-mdc-slider.mat-mdc-slider-with-animation .mdc-slider__thumb,.mat-mdc-slider.mat-mdc-slider-with-animation .mdc-slider__track--active_fill{transition-duration:80ms}.mat-mdc-slider.mat-mdc-slider-with-animation.mat-mdc-slider-disable-track-animation .mdc-slider__track--active_fill{transition-duration:0ms}.mat-mdc-slider .mdc-slider__track,.mat-mdc-slider .mdc-slider__thumb{pointer-events:none}.mat-mdc-slider .mdc-slider__value-indicator{opacity:var(--mat-mdc-slider-value-indicator-opacity, 1)}.mat-mdc-slider .mat-ripple .mat-ripple-element{background-color:var(--mat-mdc-slider-ripple-color, transparent)}.mat-mdc-slider .mat-ripple .mat-mdc-slider-hover-ripple{background-color:var(--mat-mdc-slider-hover-ripple-color, transparent)}.mat-mdc-slider .mat-ripple .mat-mdc-slider-focus-ripple,.mat-mdc-slider .mat-ripple .mat-mdc-slider-active-ripple{background-color:var(--mat-mdc-slider-focus-ripple-color, transparent)}.mat-mdc-slider._mat-animation-noopable.mdc-slider--discrete .mdc-slider__thumb,.mat-mdc-slider._mat-animation-noopable.mdc-slider--discrete .mdc-slider__track--active_fill,.mat-mdc-slider._mat-animation-noopable .mdc-slider__value-indicator{transition:none}.mat-mdc-slider .mat-mdc-focus-indicator::before{border-radius:50%}.mdc-slider__thumb--focused .mat-mdc-focus-indicator::before{content:\\\"\\\"}\"] }]\n        }], ctorParameters: function () { return [{ type: i0.NgZone }, { type: i0.ChangeDetectorRef }, { type: i1.Platform }, { type: i0.ElementRef }, { type: i2$1.Directionality, decorators: [{\n                    type: Optional\n                }] }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [MAT_RIPPLE_GLOBAL_OPTIONS]\n                }] }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [ANIMATION_MODULE_TYPE]\n                }] }]; }, propDecorators: { _trackActive: [{\n                type: ViewChild,\n                args: ['trackActive']\n            }], _thumbs: [{\n                type: ViewChildren,\n                args: [MAT_SLIDER_VISUAL_THUMB]\n            }], _input: [{\n                type: ContentChild,\n                args: [MAT_SLIDER_THUMB]\n            }], _inputs: [{\n                type: ContentChildren,\n                args: [MAT_SLIDER_RANGE_THUMB, { descendants: false }]\n            }], disabled: [{\n                type: Input\n            }], discrete: [{\n                type: Input\n            }], showTickMarks: [{\n                type: Input\n            }], min: [{\n                type: Input\n            }], max: [{\n                type: Input\n            }], step: [{\n                type: Input\n            }], displayWith: [{\n                type: Input\n            }] } });\n/** Ensures that there is not an invalid configuration for the slider thumb inputs. */\nfunction _validateInputs(isRange, endInputElement, startInputElement) {\n    const startValid = !isRange || startInputElement?._hostElement.hasAttribute('matSliderStartThumb');\n    const endValid = endInputElement._hostElement.hasAttribute(isRange ? 'matSliderEndThumb' : 'matSliderThumb');\n    if (!startValid || !endValid) {\n        _throwInvalidInputConfigurationError();\n    }\n}\nfunction _throwInvalidInputConfigurationError() {\n    throw Error(`Invalid slider thumb input configuration!\n\n   Valid configurations are as follows:\n\n     <mat-slider>\n       <input matSliderThumb>\n     </mat-slider>\n\n     or\n\n     <mat-slider>\n       <input matSliderStartThumb>\n       <input matSliderEndThumb>\n     </mat-slider>\n   `);\n}\n\n/**\n * Provider that allows the slider thumb to register as a ControlValueAccessor.\n * @docs-private\n */\nconst MAT_SLIDER_THUMB_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => MatSliderThumb),\n    multi: true,\n};\n/**\n * Provider that allows the range slider thumb to register as a ControlValueAccessor.\n * @docs-private\n */\nconst MAT_SLIDER_RANGE_THUMB_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => MatSliderRangeThumb),\n    multi: true,\n};\n/**\n * Directive that adds slider-specific behaviors to an input element inside `<mat-slider>`.\n * Up to two may be placed inside of a `<mat-slider>`.\n *\n * If one is used, the selector `matSliderThumb` must be used, and the outcome will be a normal\n * slider. If two are used, the selectors `matSliderStartThumb` and `matSliderEndThumb` must be\n * used, and the outcome will be a range slider with two slider thumbs.\n */\nclass MatSliderThumb {\n    get value() {\n        return coerceNumberProperty(this._hostElement.value);\n    }\n    set value(v) {\n        const val = coerceNumberProperty(v).toString();\n        if (!this._hasSetInitialValue) {\n            this._initialValue = val;\n            return;\n        }\n        if (this._isActive) {\n            return;\n        }\n        this._hostElement.value = val;\n        this._updateThumbUIByValue();\n        this._slider._onValueChange(this);\n        this._cdr.detectChanges();\n    }\n    /**\n     * The current translateX in px of the slider visual thumb.\n     * @docs-private\n     */\n    get translateX() {\n        if (this._slider.min >= this._slider.max) {\n            this._translateX = 0;\n            return this._translateX;\n        }\n        if (this._translateX === undefined) {\n            this._translateX = this._calcTranslateXByValue();\n        }\n        return this._translateX;\n    }\n    set translateX(v) {\n        this._translateX = v;\n    }\n    /** @docs-private */\n    get min() {\n        return coerceNumberProperty(this._hostElement.min);\n    }\n    set min(v) {\n        this._hostElement.min = coerceNumberProperty(v).toString();\n        this._cdr.detectChanges();\n    }\n    /** @docs-private */\n    get max() {\n        return coerceNumberProperty(this._hostElement.max);\n    }\n    set max(v) {\n        this._hostElement.max = coerceNumberProperty(v).toString();\n        this._cdr.detectChanges();\n    }\n    get step() {\n        return coerceNumberProperty(this._hostElement.step);\n    }\n    set step(v) {\n        this._hostElement.step = coerceNumberProperty(v).toString();\n        this._cdr.detectChanges();\n    }\n    /** @docs-private */\n    get disabled() {\n        return coerceBooleanProperty(this._hostElement.disabled);\n    }\n    set disabled(v) {\n        this._hostElement.disabled = coerceBooleanProperty(v);\n        this._cdr.detectChanges();\n        if (this._slider.disabled !== this.disabled) {\n            this._slider.disabled = this.disabled;\n        }\n    }\n    /** The percentage of the slider that coincides with the value. */\n    get percentage() {\n        if (this._slider.min >= this._slider.max) {\n            return this._slider._isRtl ? 1 : 0;\n        }\n        return (this.value - this._slider.min) / (this._slider.max - this._slider.min);\n    }\n    /** @docs-private */\n    get fillPercentage() {\n        if (!this._slider._cachedWidth) {\n            return this._slider._isRtl ? 1 : 0;\n        }\n        if (this._translateX === 0) {\n            return 0;\n        }\n        return this.translateX / this._slider._cachedWidth;\n    }\n    /** Used to relay updates to _isFocused to the slider visual thumbs. */\n    _setIsFocused(v) {\n        this._isFocused = v;\n    }\n    constructor(_ngZone, _elementRef, _cdr, _slider) {\n        this._ngZone = _ngZone;\n        this._elementRef = _elementRef;\n        this._cdr = _cdr;\n        this._slider = _slider;\n        /** Event emitted when the `value` is changed. */\n        this.valueChange = new EventEmitter();\n        /** Event emitted when the slider thumb starts being dragged. */\n        this.dragStart = new EventEmitter();\n        /** Event emitted when the slider thumb stops being dragged. */\n        this.dragEnd = new EventEmitter();\n        /**\n         * Indicates whether this thumb is the start or end thumb.\n         * @docs-private\n         */\n        this.thumbPosition = 2 /* _MatThumb.END */;\n        /** The radius of a native html slider's knob. */\n        this._knobRadius = 8;\n        /** Whether user's cursor is currently in a mouse down state on the input. */\n        this._isActive = false;\n        /** Whether the input is currently focused (either by tab or after clicking). */\n        this._isFocused = false;\n        /**\n         * Whether the initial value has been set.\n         * This exists because the initial value cannot be immediately set because the min and max\n         * must first be relayed from the parent MatSlider component, which can only happen later\n         * in the component lifecycle.\n         */\n        this._hasSetInitialValue = false;\n        /** Emits when the component is destroyed. */\n        this._destroyed = new Subject();\n        /**\n         * Indicates whether UI updates should be skipped.\n         *\n         * This flag is used to avoid flickering\n         * when correcting values on pointer up/down.\n         */\n        this._skipUIUpdate = false;\n        /** Callback called when the slider input value changes. */\n        this._onChangeFn = () => { };\n        /** Callback called when the slider input has been touched. */\n        this._onTouchedFn = () => { };\n        this._hostElement = _elementRef.nativeElement;\n        this._ngZone.runOutsideAngular(() => {\n            this._hostElement.addEventListener('pointerdown', this._onPointerDown.bind(this));\n            this._hostElement.addEventListener('pointermove', this._onPointerMove.bind(this));\n            this._hostElement.addEventListener('pointerup', this._onPointerUp.bind(this));\n        });\n    }\n    ngOnDestroy() {\n        this._hostElement.removeEventListener('pointerdown', this._onPointerDown);\n        this._hostElement.removeEventListener('pointermove', this._onPointerMove);\n        this._hostElement.removeEventListener('pointerup', this._onPointerUp);\n        this._destroyed.next();\n        this._destroyed.complete();\n        this.dragStart.complete();\n        this.dragEnd.complete();\n    }\n    /** @docs-private */\n    initProps() {\n        this._updateWidthInactive();\n        // If this or the parent slider is disabled, just make everything disabled.\n        if (this.disabled !== this._slider.disabled) {\n            // The MatSlider setter for disabled will relay this and disable both inputs.\n            this._slider.disabled = true;\n        }\n        this.step = this._slider.step;\n        this.min = this._slider.min;\n        this.max = this._slider.max;\n        this._initValue();\n    }\n    /** @docs-private */\n    initUI() {\n        this._updateThumbUIByValue();\n    }\n    _initValue() {\n        this._hasSetInitialValue = true;\n        if (this._initialValue === undefined) {\n            this.value = this._getDefaultValue();\n        }\n        else {\n            this._hostElement.value = this._initialValue;\n            this._updateThumbUIByValue();\n            this._slider._onValueChange(this);\n            this._cdr.detectChanges();\n        }\n    }\n    _getDefaultValue() {\n        return this.min;\n    }\n    _onBlur() {\n        this._setIsFocused(false);\n        this._onTouchedFn();\n    }\n    _onFocus() {\n        this._setIsFocused(true);\n    }\n    _onChange() {\n        this.valueChange.emit(this.value);\n        // only used to handle the edge case where user\n        // mousedown on the slider then uses arrow keys.\n        if (this._isActive) {\n            this._updateThumbUIByValue({ withAnimation: true });\n        }\n    }\n    _onInput() {\n        this._onChangeFn(this.value);\n        // handles arrowing and updating the value when\n        // a step is defined.\n        if (this._slider.step || !this._isActive) {\n            this._updateThumbUIByValue({ withAnimation: true });\n        }\n        this._slider._onValueChange(this);\n    }\n    _onNgControlValueChange() {\n        // only used to handle when the value change\n        // originates outside of the slider.\n        if (!this._isActive || !this._isFocused) {\n            this._slider._onValueChange(this);\n            this._updateThumbUIByValue();\n        }\n        this._slider.disabled = this._formControl.disabled;\n    }\n    _onPointerDown(event) {\n        if (this.disabled || event.button !== 0) {\n            return;\n        }\n        this._isActive = true;\n        this._setIsFocused(true);\n        this._updateWidthActive();\n        this._slider._updateDimensions();\n        // Does nothing if a step is defined because we\n        // want the value to snap to the values on input.\n        if (!this._slider.step) {\n            this._updateThumbUIByPointerEvent(event, { withAnimation: true });\n        }\n        if (!this.disabled) {\n            this._handleValueCorrection(event);\n            this.dragStart.emit({ source: this, parent: this._slider, value: this.value });\n        }\n    }\n    /**\n     * Corrects the value of the slider on pointer up/down.\n     *\n     * Called on pointer down and up because the value is set based\n     * on the inactive width instead of the active width.\n     */\n    _handleValueCorrection(event) {\n        // Don't update the UI with the current value! The value on pointerdown\n        // and pointerup is calculated in the split second before the input(s)\n        // resize. See _updateWidthInactive() and _updateWidthActive() for more\n        // details.\n        this._skipUIUpdate = true;\n        // Note that this function gets triggered before the actual value of the\n        // slider is updated. This means if we were to set the value here, it\n        // would immediately be overwritten. Using setTimeout ensures the setting\n        // of the value happens after the value has been updated by the\n        // pointerdown event.\n        setTimeout(() => {\n            this._skipUIUpdate = false;\n            this._fixValue(event);\n        }, 0);\n    }\n    /** Corrects the value of the slider based on the pointer event's position. */\n    _fixValue(event) {\n        const xPos = event.clientX - this._slider._cachedLeft;\n        const width = this._slider._cachedWidth;\n        const step = this._slider.step === 0 ? 1 : this._slider.step;\n        const numSteps = Math.floor((this._slider.max - this._slider.min) / step);\n        const percentage = this._slider._isRtl ? 1 - xPos / width : xPos / width;\n        // To ensure the percentage is rounded to the necessary number of decimals.\n        const fixedPercentage = Math.round(percentage * numSteps) / numSteps;\n        const impreciseValue = fixedPercentage * (this._slider.max - this._slider.min) + this._slider.min;\n        const value = Math.round(impreciseValue / step) * step;\n        const prevValue = this.value;\n        if (value === prevValue) {\n            // Because we prevented UI updates, if it turns out that the race\n            // condition didn't happen and the value is already correct, we\n            // have to apply the ui updates now.\n            this._slider._onValueChange(this);\n            this._slider.step > 0\n                ? this._updateThumbUIByValue()\n                : this._updateThumbUIByPointerEvent(event, { withAnimation: this._slider._hasAnimation });\n            return;\n        }\n        this.value = value;\n        this.valueChange.emit(this.value);\n        this._onChangeFn(this.value);\n        this._slider._onValueChange(this);\n        this._slider.step > 0\n            ? this._updateThumbUIByValue()\n            : this._updateThumbUIByPointerEvent(event, { withAnimation: this._slider._hasAnimation });\n    }\n    _onPointerMove(event) {\n        // Again, does nothing if a step is defined because\n        // we want the value to snap to the values on input.\n        if (!this._slider.step && this._isActive) {\n            this._updateThumbUIByPointerEvent(event);\n        }\n    }\n    _onPointerUp() {\n        if (this._isActive) {\n            this._isActive = false;\n            this.dragEnd.emit({ source: this, parent: this._slider, value: this.value });\n            setTimeout(() => this._updateWidthInactive());\n        }\n    }\n    _clamp(v) {\n        return Math.max(Math.min(v, this._slider._cachedWidth), 0);\n    }\n    _calcTranslateXByValue() {\n        if (this._slider._isRtl) {\n            return (1 - this.percentage) * this._slider._cachedWidth;\n        }\n        return this.percentage * this._slider._cachedWidth;\n    }\n    _calcTranslateXByPointerEvent(event) {\n        return event.clientX - this._slider._cachedLeft;\n    }\n    /**\n     * Used to set the slider width to the correct\n     * dimensions while the user is dragging.\n     */\n    _updateWidthActive() {\n        this._hostElement.style.padding = `0 ${this._slider._inputPadding}px`;\n        this._hostElement.style.width = `calc(100% + ${this._slider._inputPadding}px)`;\n    }\n    /**\n     * Sets the slider input to disproportionate dimensions to allow for touch\n     * events to be captured on touch devices.\n     */\n    _updateWidthInactive() {\n        this._hostElement.style.padding = '0px';\n        this._hostElement.style.width = 'calc(100% + 48px)';\n        this._hostElement.style.left = '-24px';\n    }\n    _updateThumbUIByValue(options) {\n        this.translateX = this._clamp(this._calcTranslateXByValue());\n        this._updateThumbUI(options);\n    }\n    _updateThumbUIByPointerEvent(event, options) {\n        this.translateX = this._clamp(this._calcTranslateXByPointerEvent(event));\n        this._updateThumbUI(options);\n    }\n    _updateThumbUI(options) {\n        this._slider._setTransition(!!options?.withAnimation);\n        this._slider._onTranslateXChange(this);\n    }\n    /**\n     * Sets the input's value.\n     * @param value The new value of the input\n     * @docs-private\n     */\n    writeValue(value) {\n        this.value = value;\n    }\n    /**\n     * Registers a callback to be invoked when the input's value changes from user input.\n     * @param fn The callback to register\n     * @docs-private\n     */\n    registerOnChange(fn) {\n        this._onChangeFn = fn;\n    }\n    /**\n     * Registers a callback to be invoked when the input is blurred by the user.\n     * @param fn The callback to register\n     * @docs-private\n     */\n    registerOnTouched(fn) {\n        this._onTouchedFn = fn;\n    }\n    /**\n     * Sets the disabled state of the slider.\n     * @param isDisabled The new disabled state\n     * @docs-private\n     */\n    setDisabledState(isDisabled) {\n        this.disabled = isDisabled;\n    }\n    focus() {\n        this._hostElement.focus();\n    }\n    blur() {\n        this._hostElement.blur();\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: MatSliderThumb, deps: [{ token: i0.NgZone }, { token: i0.ElementRef }, { token: i0.ChangeDetectorRef }, { token: MAT_SLIDER }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.0.0\", type: MatSliderThumb, selector: \"input[matSliderThumb]\", inputs: { value: \"value\" }, outputs: { valueChange: \"valueChange\", dragStart: \"dragStart\", dragEnd: \"dragEnd\" }, host: { attributes: { \"type\": \"range\" }, listeners: { \"change\": \"_onChange()\", \"input\": \"_onInput()\", \"blur\": \"_onBlur()\", \"focus\": \"_onFocus()\" }, properties: { \"attr.aria-valuetext\": \"_valuetext\" }, classAttribute: \"mdc-slider__input\" }, providers: [\n            MAT_SLIDER_THUMB_VALUE_ACCESSOR,\n            { provide: MAT_SLIDER_THUMB, useExisting: MatSliderThumb },\n        ], exportAs: [\"matSliderThumb\"], ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: MatSliderThumb, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'input[matSliderThumb]',\n                    exportAs: 'matSliderThumb',\n                    host: {\n                        'class': 'mdc-slider__input',\n                        'type': 'range',\n                        '[attr.aria-valuetext]': '_valuetext',\n                        '(change)': '_onChange()',\n                        '(input)': '_onInput()',\n                        // TODO(wagnermaciel): Consider using a global event listener instead.\n                        // Reason: I have found a semi-consistent way to mouse up without triggering this event.\n                        '(blur)': '_onBlur()',\n                        '(focus)': '_onFocus()',\n                    },\n                    providers: [\n                        MAT_SLIDER_THUMB_VALUE_ACCESSOR,\n                        { provide: MAT_SLIDER_THUMB, useExisting: MatSliderThumb },\n                    ],\n                }]\n        }], ctorParameters: function () { return [{ type: i0.NgZone }, { type: i0.ElementRef }, { type: i0.ChangeDetectorRef }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [MAT_SLIDER]\n                }] }]; }, propDecorators: { value: [{\n                type: Input\n            }], valueChange: [{\n                type: Output\n            }], dragStart: [{\n                type: Output\n            }], dragEnd: [{\n                type: Output\n            }] } });\nclass MatSliderRangeThumb extends MatSliderThumb {\n    /** @docs-private */\n    getSibling() {\n        if (!this._sibling) {\n            this._sibling = this._slider._getInput(this._isEndThumb ? 1 /* _MatThumb.START */ : 2 /* _MatThumb.END */);\n        }\n        return this._sibling;\n    }\n    /**\n     * Returns the minimum translateX position allowed for this slider input's visual thumb.\n     * @docs-private\n     */\n    getMinPos() {\n        const sibling = this.getSibling();\n        if (!this._isLeftThumb && sibling) {\n            return sibling.translateX;\n        }\n        return 0;\n    }\n    /**\n     * Returns the maximum translateX position allowed for this slider input's visual thumb.\n     * @docs-private\n     */\n    getMaxPos() {\n        const sibling = this.getSibling();\n        if (this._isLeftThumb && sibling) {\n            return sibling.translateX;\n        }\n        return this._slider._cachedWidth;\n    }\n    _setIsLeftThumb() {\n        this._isLeftThumb =\n            (this._isEndThumb && this._slider._isRtl) || (!this._isEndThumb && !this._slider._isRtl);\n    }\n    constructor(_ngZone, _slider, _elementRef, _cdr) {\n        super(_ngZone, _elementRef, _cdr, _slider);\n        this._cdr = _cdr;\n        this._isEndThumb = this._hostElement.hasAttribute('matSliderEndThumb');\n        this._setIsLeftThumb();\n        this.thumbPosition = this._isEndThumb ? 2 /* _MatThumb.END */ : 1 /* _MatThumb.START */;\n    }\n    _getDefaultValue() {\n        return this._isEndThumb && this._slider._isRange ? this.max : this.min;\n    }\n    _onInput() {\n        super._onInput();\n        this._updateSibling();\n        if (!this._isActive) {\n            this._updateWidthInactive();\n        }\n    }\n    _onNgControlValueChange() {\n        super._onNgControlValueChange();\n        this.getSibling()?._updateMinMax();\n    }\n    _onPointerDown(event) {\n        if (this.disabled) {\n            return;\n        }\n        if (this._sibling) {\n            this._sibling._updateWidthActive();\n            this._sibling._hostElement.classList.add('mat-mdc-slider-input-no-pointer-events');\n        }\n        super._onPointerDown(event);\n    }\n    _onPointerUp() {\n        super._onPointerUp();\n        if (this._sibling) {\n            setTimeout(() => {\n                this._sibling._updateWidthInactive();\n                this._sibling._hostElement.classList.remove('mat-mdc-slider-input-no-pointer-events');\n            });\n        }\n    }\n    _onPointerMove(event) {\n        super._onPointerMove(event);\n        if (!this._slider.step && this._isActive) {\n            this._updateSibling();\n        }\n    }\n    _fixValue(event) {\n        super._fixValue(event);\n        this._sibling?._updateMinMax();\n    }\n    _clamp(v) {\n        return Math.max(Math.min(v, this.getMaxPos()), this.getMinPos());\n    }\n    _updateMinMax() {\n        const sibling = this.getSibling();\n        if (!sibling) {\n            return;\n        }\n        if (this._isEndThumb) {\n            this.min = Math.max(this._slider.min, sibling.value);\n            this.max = this._slider.max;\n        }\n        else {\n            this.min = this._slider.min;\n            this.max = Math.min(this._slider.max, sibling.value);\n        }\n    }\n    _updateWidthActive() {\n        const minWidth = this._slider._rippleRadius * 2 - this._slider._inputPadding * 2;\n        const maxWidth = this._slider._cachedWidth + this._slider._inputPadding - minWidth;\n        const percentage = this._slider.min < this._slider.max\n            ? (this.max - this.min) / (this._slider.max - this._slider.min)\n            : 1;\n        const width = maxWidth * percentage + minWidth;\n        this._hostElement.style.width = `${width}px`;\n        this._hostElement.style.padding = `0 ${this._slider._inputPadding}px`;\n    }\n    _updateWidthInactive() {\n        const sibling = this.getSibling();\n        if (!sibling) {\n            return;\n        }\n        const maxWidth = this._slider._cachedWidth;\n        const midValue = this._isEndThumb\n            ? this.value - (this.value - sibling.value) / 2\n            : this.value + (sibling.value - this.value) / 2;\n        const _percentage = this._isEndThumb\n            ? (this.max - midValue) / (this._slider.max - this._slider.min)\n            : (midValue - this.min) / (this._slider.max - this._slider.min);\n        const percentage = this._slider.min < this._slider.max ? _percentage : 1;\n        const width = maxWidth * percentage + 24;\n        this._hostElement.style.width = `${width}px`;\n        this._hostElement.style.padding = '0px';\n        if (this._isLeftThumb) {\n            this._hostElement.style.left = '-24px';\n            this._hostElement.style.right = 'auto';\n        }\n        else {\n            this._hostElement.style.left = 'auto';\n            this._hostElement.style.right = '-24px';\n        }\n    }\n    _updateStaticStyles() {\n        this._hostElement.classList.toggle('mat-slider__right-input', !this._isLeftThumb);\n    }\n    _updateSibling() {\n        const sibling = this.getSibling();\n        if (!sibling) {\n            return;\n        }\n        sibling._updateMinMax();\n        if (this._isActive) {\n            sibling._updateWidthActive();\n        }\n        else {\n            sibling._updateWidthInactive();\n        }\n    }\n    /**\n     * Sets the input's value.\n     * @param value The new value of the input\n     * @docs-private\n     */\n    writeValue(value) {\n        this.value = value;\n        this._updateWidthInactive();\n        this._updateSibling();\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: MatSliderRangeThumb, deps: [{ token: i0.NgZone }, { token: MAT_SLIDER }, { token: i0.ElementRef }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.0.0\", type: MatSliderRangeThumb, selector: \"input[matSliderStartThumb], input[matSliderEndThumb]\", providers: [\n            MAT_SLIDER_RANGE_THUMB_VALUE_ACCESSOR,\n            { provide: MAT_SLIDER_RANGE_THUMB, useExisting: MatSliderRangeThumb },\n        ], exportAs: [\"matSliderRangeThumb\"], usesInheritance: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: MatSliderRangeThumb, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'input[matSliderStartThumb], input[matSliderEndThumb]',\n                    exportAs: 'matSliderRangeThumb',\n                    providers: [\n                        MAT_SLIDER_RANGE_THUMB_VALUE_ACCESSOR,\n                        { provide: MAT_SLIDER_RANGE_THUMB, useExisting: MatSliderRangeThumb },\n                    ],\n                }]\n        }], ctorParameters: function () { return [{ type: i0.NgZone }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [MAT_SLIDER]\n                }] }, { type: i0.ElementRef }, { type: i0.ChangeDetectorRef }]; } });\n\nclass MatSliderModule {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: MatSliderModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"16.0.0\", ngImport: i0, type: MatSliderModule, declarations: [MatSlider, MatSliderThumb, MatSliderRangeThumb, MatSliderVisualThumb], imports: [MatCommonModule, CommonModule, MatRippleModule], exports: [MatSlider, MatSliderThumb, MatSliderRangeThumb] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: MatSliderModule, imports: [MatCommonModule, CommonModule, MatRippleModule] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: MatSliderModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [MatCommonModule, CommonModule, MatRippleModule],\n                    exports: [MatSlider, MatSliderThumb, MatSliderRangeThumb],\n                    declarations: [MatSlider, MatSliderThumb, MatSliderRangeThumb, MatSliderVisualThumb],\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MatSlider, MatSliderChange, MatSliderModule, MatSliderRangeThumb, MatSliderThumb, MatSliderVisualThumb };\n"],"x_google_ignoreList":[0]}