{"version":3,"file":"845.eb60b1ce2a820091.js","mappings":"6PAUO,MAAMA,EAAwBA,KAEnC,MAAMC,EAAY,IAAIC,OACpBC,EAAAC,GAAA,IAAIC,IAAIF,EAAAG,EAAAH,EAAAI,EAAA,KAAAJ,EAAAK,KAYV,OANE,KAHIC,EAAcC,MAAoBT,GAGtC,CAEE,iBACAU,MAAOC,GAAkBC,QAAQC,IAAI,mBAAoBF,KAGrBG,KAAMC,KAC5Cf,YACAe,gBACA,EAGSC,EAA4B,eAAAC,KAAAC,KAAG,UAC1CC,SAGMA,EAAKJ,YAAYK,QAEvBD,EAAKnB,UAAUqB,WACjB,GAAC,gBAPwCC,GAAA,OAAAL,EAAAM,MAAAC,KAAAC,UAAA,KAS5BC,EAA0BA,OACpCC,OAAOC,MAAgBC,SAASV,KAAKW,OACnCf,+FCnCE,MAAMgB,EAAkB,CAC7B,CACEC,KAAM,GACNC,cAAeA,IAAMC,QAAAC,IAAA,CAAAjC,EAAAkC,EAAA,KAAAlC,EAAAkC,EAAA,KAAAlC,EAAAkC,EAAA,OAAAtB,KAAAZ,EAAAmC,KAAAnC,EAAA,OACrBoC,QAAS,CACPR,OAAQ/B,MAEVwC,cAAe,gBAAAtB,KAAAC,KACb,UACEsB,EACAC,GAEA,eAAMzB,MAA6ByB,EAAatB,KAAKW,SAC9C,CACT,GAAC,gBAAAR,EAAAoB,GAAA,OAAAzB,EAAAM,MAAAC,KAAAC,UAAA,EAPY,MAYnBkB,EAAeZ","names":["comlinkWorkerProvider","rawWorker","Worker","__webpack_require__","tu","URL","p","u","b","workerProxy","wrap","proxy","param","console","log","then","proxyWorker","destroyComlinkWorkerProvider","_ref","_asyncToGenerator","data","releaseProxy","terminate","_x","apply","this","arguments","getWorkerFromRouterData","inject","ActivatedRoute","snapshot","worker","ROUTES","path","loadComponent","Promise","all","e","bind","resolve","canDeactivate","component","currentRoute","_x2","__WEBPACK_DEFAULT_EXPORT__"],"sourceRoot":"webpack:///","sources":["./src/app/comlink-worker-demo/provider/worker.provider.ts","./src/app/comlink-worker-demo/routes.ts"],"sourcesContent":["import { proxy, releaseProxy, Remote, wrap } from 'comlink';\nimport { type ComlinkWorker } from '../worker/comlink.worker';\nimport { inject } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\n\nexport interface ComlinkWorkerResolveData {\n  rawWorker: Worker;\n  proxyWorker: Remote<ComlinkWorker>;\n}\n\nexport const comlinkWorkerProvider = (): Promise<ComlinkWorkerResolveData> => {\n  // create native worker\n  const rawWorker = new Worker(\n    new URL('./../worker/comlink.worker', import.meta.url)\n  );\n  // create proxy generator\n  const workerProxy = wrap<ComlinkWorker>(rawWorker);\n  const workerProxyCreateInstancePromise =\n    // @ts-ignore\n    new workerProxy(\n      // fill constructor params\n      'paramString',\n      proxy((param: string) => console.log('inited paramFn: ', param))\n    ) as Promise<Remote<ComlinkWorker>>;\n\n  return workerProxyCreateInstancePromise.then((proxyWorker) => ({\n    rawWorker,\n    proxyWorker,\n  }));\n};\n\nexport const destroyComlinkWorkerProvider = async (\n  data: ComlinkWorkerResolveData\n) => {\n  // call Comlink \"onDestroy\"\n  await data.proxyWorker[releaseProxy]();\n  // destroy worker\n  data.rawWorker.terminate();\n};\n\nexport const getWorkerFromRouterData = () =>\n  (inject(ActivatedRoute).snapshot.data['worker'] as ComlinkWorkerResolveData)\n    .proxyWorker;\n","import { ActivatedRouteSnapshot, Route } from '@angular/router';\nimport type NativeWorkerDemoComponent from '../native-worker-demo/native-worker-demo.component';\nimport {\n  comlinkWorkerProvider,\n  destroyComlinkWorkerProvider,\n} from './provider/worker.provider';\n\nexport const ROUTES: Route[] = [\n  {\n    path: '',\n    loadComponent: () => import('./comlink-worker-demo.component'),\n    resolve: {\n      worker: comlinkWorkerProvider,\n    },\n    canDeactivate: [\n      async (\n        component: NativeWorkerDemoComponent,\n        currentRoute: ActivatedRouteSnapshot\n      ) => {\n        await destroyComlinkWorkerProvider(currentRoute.data['worker']);\n        return true;\n      },\n    ],\n  },\n];\n\nexport default ROUTES;\n"],"x_google_ignoreList":[]}